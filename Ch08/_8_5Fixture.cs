//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;

namespace Jint.Test262.Ch08
{
    [TestFixture]
    public class _8_5Fixture : Test262Fixture
    {
        public _8_5Fixture()
            : base("ch08\\8.5")
        {
        }

        [Test(Description = "Valid Number ranges")]
        public void _8_5_1()
        {
            RunFile("8.5.1.js");
        }

        [Test(Description = "Compare NaN with NaN")]
        public void S8_5_A1()
        {
            RunFile("S8.5_A1.js");
        }

        [Test(Description = "Create variable entitled Infinity")]
        public void S8_5_A10()
        {
            RunFile("S8.5_A10.js");
        }

        [Test(Description = "Check 1.0/p_zero !== 1.0/n_zero")]
        public void S8_5_A11_T1()
        {
            RunFile("S8.5_A11_T1.js");
        }

        [Test(Description = "Compare positive_zero and negative_zero")]
        public void S8_5_A11_T2()
        {
            RunFile("S8.5_A11_T2.js");
        }

        [Test(Description = "Compare Infinity and +Infinity with Number.POSITIVE_INFINITY")]
        public void S8_5_A12_1()
        {
            RunFile("S8.5_A12.1.js");
        }

        [Test(Description = "Compare -Infinity with Number.NEGATIVE_INFINITY")]
        public void S8_5_A12_2()
        {
            RunFile("S8.5_A12.2.js");
        }

        [Test(Description = "Finite Non zero values where e is 971")]
        public void S8_5_A13_T2()
        {
            RunFile("S8.5_A13_T2.js");
        }

        [Test(Description = "Create number bigger of 2**1024")]
        public void S8_5_A14_T1()
        {
            RunFile("S8.5_A14_T1.js");
        }

        [Test(Description = "Create number smaller of -2**1024")]
        public void S8_5_A14_T2()
        {
            RunFile("S8.5_A14_T2.js");
        }

        [Test(Description = "Use 2^53 + 2 number and do some operation with it")]
        public void S8_5_A2_1()
        {
            RunFile("S8.5_A2.1.js");
        }

        [Test(Description = "Use 2^53 + 2 number and do some operation with it")]
        public void S8_5_A2_2()
        {
            RunFile("S8.5_A2.2.js");
        }

        [Test(Description = "Check type of NaN")]
        public void S8_5_A3()
        {
            RunFile("S8.5_A3.js");
        }

        [Test(Description = "Create variable entitled NaN")]
        public void S8_5_A4()
        {
            RunFile("S8.5_A4.js");
        }

        [Test(Description = "Compare NaN with zero")]
        public void S8_5_A5()
        {
            RunFile("S8.5_A5.js");
        }

        [Test(Description = "Check type of -Infinity")]
        public void S8_5_A6()
        {
            RunFile("S8.5_A6.js");
        }

        [Test(Description = "Check type of +Infinity")]
        public void S8_5_A7()
        {
            RunFile("S8.5_A7.js");
        }

        [Test(Description = "Compare Infinity and +Infinity")]
        public void S8_5_A8()
        {
            RunFile("S8.5_A8.js");
        }

        [Test(Description = "Try alter globally defined variable NaN")]
        public void S8_5_A9()
        {
            RunFile("S8.5_A9.js");
        }
    }
}
