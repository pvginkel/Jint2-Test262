//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;

namespace Jint.Test262.Ch11._11_1
{
    [TestFixture]
    public class _11_1_5Fixture : Test262Fixture
    {
        public _11_1_5Fixture()
            : base("ch11\\11.1\\11.1.5")
        {
        }

        [Test(Description = "Object literal - get set property")]
        public void _11_1_5_0_1()
        {
            RunFile("11.1.5-0-1.js");
        }

        [Test(Description = "Object literal - multiple get set properties")]
        public void _11_1_5_0_2()
        {
            RunFile("11.1.5-0-2.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown when 'eval' occurs as the Identifier in a PropertySetParameterList of a PropertyAssignment that is contained in strict code")]
        public void _11_1_5_1_s()
        {
            RunFile("11.1.5-1-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown when 'eval' occurs as the Identifier in a PropertySetParameterList of a PropertyAssignment that is contained in strict code")]
        [ExpectedException]
        public void _11_1_5_1gs()
        {
            RunFile("11.1.5-1gs.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown when 'arguments' occurs as the Identifier in a PropertySetParameterList of a PropertyAssignment that is contained in strict code")]
        public void _11_1_5_2_s()
        {
            RunFile("11.1.5-2-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown when eval code contains an ObjectLiteral with more than one definition of any data property")]
        [ExpectedException]
        public void _11_1_5_2gs()
        {
            RunFile("11.1.5-2gs.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown when  'evals'  occurs as the Identifier in a PropertySetParameterList of a PropertyAssignment  if its FunctionBody is strict code")]
        public void _11_1_5_3_s()
        {
            RunFile("11.1.5-3-s.js");
        }

        [Test(Description = "Object literal - SyntaxError for duplicate date property name in strict mode")]
        public void _11_1_5_4_4_a_1_s()
        {
            RunFile("11.1.5-4-4-a-1-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown when 'arguments'  occurs as the Identifier in a PropertySetParameterList of a PropertyAssignment  if its FunctionBody is strict code")]
        public void _11_1_5_4_s()
        {
            RunFile("11.1.5-4-s.js");
        }

        [Test(Description = "Object initialization using PropertyNameAndValueList (PropertyAssignment) when property (read-only) exists in Object.prototype (step 3)")]
        public void _11_1_5_3_3_1()
        {
            RunFile("11.1.5_3-3-1.js");
        }

        [Test(Description = "Object literal - Duplicate data property name allowed if not in strict mode")]
        public void _11_1_5_4_4_a_2()
        {
            RunFile("11.1.5_4-4-a-2.js");
        }

        [Test(Description = "Object literal - Duplicate data property name allowed gets last defined value")]
        public void _11_1_5_4_4_a_3()
        {
            RunFile("11.1.5_4-4-a-3.js");
        }

        [Test(Description = "Object literal - SyntaxError if a data property definition is followed by get accessor definition with the same name")]
        public void _11_1_5_4_4_b_1()
        {
            RunFile("11.1.5_4-4-b-1.js");
        }

        [Test(Description = "Object literal - SyntaxError if a data property definition is followed by set accessor definition with the same name")]
        public void _11_1_5_4_4_b_2()
        {
            RunFile("11.1.5_4-4-b-2.js");
        }

        [Test(Description = "Object literal - SyntaxError if a get accessor property definition is followed by a data property definition with the same name")]
        public void _11_1_5_4_4_c_1()
        {
            RunFile("11.1.5_4-4-c-1.js");
        }

        [Test(Description = "Object literal - SyntaxError if a set accessor property definition is followed by a data property definition with the same name")]
        public void _11_1_5_4_4_c_2()
        {
            RunFile("11.1.5_4-4-c-2.js");
        }

        [Test(Description = "Object literal - SyntaxError for duplicate property name (get,get)")]
        public void _11_1_5_4_4_d_1()
        {
            RunFile("11.1.5_4-4-d-1.js");
        }

        [Test(Description = "Object literal - SyntaxError for duplicate property name (set,set)")]
        public void _11_1_5_4_4_d_2()
        {
            RunFile("11.1.5_4-4-d-2.js");
        }

        [Test(Description = "Object literal - SyntaxError for duplicate property name (get,set,get)")]
        public void _11_1_5_4_4_d_3()
        {
            RunFile("11.1.5_4-4-d-3.js");
        }

        [Test(Description = "Object literal - SyntaxError for duplicate property name (set,get,set)")]
        public void _11_1_5_4_4_d_4()
        {
            RunFile("11.1.5_4-4-d-4.js");
        }

        [Test(Description = "Object initialization using PropertyNameAndValueList (PropertyNameAndValueList , PropertyAssignment) when property (read-only) exists in Object.prototype (Step 5)")]
        public void _11_1_5_4_5_1()
        {
            RunFile("11.1.5_4-5-1.js");
        }

        [Test(Description = "Object literal - property descriptor for assignment expression")]
        public void _11_1_5_5_4_1()
        {
            RunFile("11.1.5_5-4-1.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown when an assignment to a reserved word or a future reserved word is contained in strict code")]
        public void _11_1_5_6_2_1_s()
        {
            RunFile("11.1.5_6-2-1-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown when an assignment to a reserved word or a future reserved word is made inside a strict mode FunctionBody of a PropertyAssignment")]
        public void _11_1_5_6_2_2_s()
        {
            RunFile("11.1.5_6-2-2-s.js");
        }

        [Test(Description = "Object literal - property descriptor for get property assignment")]
        public void _11_1_5_6_3_1()
        {
            RunFile("11.1.5_6-3-1.js");
        }

        [Test(Description = "Object literal - property descriptor for get property assignment should not create a set function")]
        public void _11_1_5_6_3_2()
        {
            RunFile("11.1.5_6-3-2.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown when an assignment to a reserved word is contained in strict code")]
        public void _11_1_5_7_2_1_s()
        {
            RunFile("11.1.5_7-2-1-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown when an assignment to a reserved word is made in  a strict FunctionBody of a PropertyAssignment")]
        public void _11_1_5_7_2_2_s()
        {
            RunFile("11.1.5_7-2-2-s.js");
        }

        [Test(Description = "Object literal - property descriptor for set property assignment")]
        public void _11_1_5_7_3_1()
        {
            RunFile("11.1.5_7-3-1.js");
        }

        [Test(Description = "Object literal - property descriptor for set property assignment should not create a get function")]
        public void _11_1_5_7_3_2()
        {
            RunFile("11.1.5_7-3-2.js");
        }

        [Test(Description = "Checking various properteis of the object defined with \"var object = {}\"")]
        public void S11_1_5_A1_1()
        {
            RunFile("S11.1.5_A1.1.js");
        }

        [Test(Description = "Checking various properteis and contents of the object defined with \"var object = {1 : true}\"")]
        public void S11_1_5_A1_2()
        {
            RunFile("S11.1.5_A1.2.js");
        }

        [Test(Description = "Checking various properteis and contents of the object defined with \"var object = {\"x\" : true}\"")]
        public void S11_1_5_A1_3()
        {
            RunFile("S11.1.5_A1.3.js");
        }

        [Test(Description = "Checking various properteis and contents of the object defined with \"var object = {prop : true}\"")]
        public void S11_1_5_A1_4()
        {
            RunFile("S11.1.5_A1.4.js");
        }

        [Test(Description = "Creating property \"prop\" of various types(boolean, number and etc.)")]
        public void S11_1_5_A2()
        {
            RunFile("S11.1.5_A2.js");
        }

        [Test(Description = "Creating the object defined with \"var object = {0 : 1, \"1\" : \"x\", o : {}}\"")]
        public void S11_1_5_A3()
        {
            RunFile("S11.1.5_A3.js");
        }

        [Test(Description = "Checking if execution of \"var object = {true : 1}\" does not fail")]
        public void S11_1_5_A4_1()
        {
            RunFile("S11.1.5_A4.1.js");
        }

        [Test(Description = "Checking if execution of \"var object = {null : true}\" does not fail")]
        public void S11_1_5_A4_2()
        {
            RunFile("S11.1.5_A4.2.js");
        }

        [Test(Description = "Creating properties with following names: undefined, 'true', 'null'")]
        public void S11_1_5_A4_3()
        {
            RunFile("S11.1.5_A4.3.js");
        }
    }
}
