//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;

namespace Jint.Test262.Ch11
{
    [TestFixture]
    public class _11_12Fixture : Test262Fixture
    {
        public _11_12Fixture()
            : base("ch11\\11.12")
        {
        }

        [Test(Description = "Checking by using eval")]
        public void S11_12_A1()
        {
            RunFile("S11.12_A1.js");
        }

        [Test(Description = "Either Type is not Reference or GetBase is not null")]
        public void S11_12_A2_1_T1()
        {
            RunFile("S11.12_A2.1_T1.js");
        }

        [Test(Description = "If GetBase(x) is null, throw ReferenceError")]
        public void S11_12_A2_1_T2()
        {
            RunFile("S11.12_A2.1_T2.js");
        }

        [Test(Description = "If ToBoolean(x) is true and GetBase(y) is null, throw ReferenceError")]
        public void S11_12_A2_1_T3()
        {
            RunFile("S11.12_A2.1_T3.js");
        }

        [Test(Description = "If ToBoolean(x) is false and GetBase(z) is null, throw ReferenceError")]
        public void S11_12_A2_1_T4()
        {
            RunFile("S11.12_A2.1_T4.js");
        }

        [Test(Description = "If ToBoolean(x) is true and GetBase(z) is null, return y")]
        public void S11_12_A2_1_T5()
        {
            RunFile("S11.12_A2.1_T5.js");
        }

        [Test(Description = "If ToBoolean(x) is false and GetBase(y) is null, return z")]
        public void S11_12_A2_1_T6()
        {
            RunFile("S11.12_A2.1_T6.js");
        }

        [Test(Description = "Type(y) and Type(z) are boolean primitives")]
        public void S11_12_A3_T1()
        {
            RunFile("S11.12_A3_T1.js");
        }

        [Test(Description = "Type(y) and Type(z) are number primitives")]
        public void S11_12_A3_T2()
        {
            RunFile("S11.12_A3_T2.js");
        }

        [Test(Description = "Type(y) and Type(z) are string primitives")]
        public void S11_12_A3_T3()
        {
            RunFile("S11.12_A3_T3.js");
        }

        [Test(Description = "Type(x) or Type(y) is changed between null and undefined")]
        public void S11_12_A3_T4()
        {
            RunFile("S11.12_A3_T4.js");
        }

        [Test(Description = "Type(y) and Type(z) are boolean primitives")]
        public void S11_12_A4_T1()
        {
            RunFile("S11.12_A4_T1.js");
        }

        [Test(Description = "Type(y) and Type(z) are number primitives")]
        public void S11_12_A4_T2()
        {
            RunFile("S11.12_A4_T2.js");
        }

        [Test(Description = "Type(y) and Type(z) are string primitives")]
        public void S11_12_A4_T3()
        {
            RunFile("S11.12_A4_T3.js");
        }

        [Test(Description = "Type(x) or Type(y) is changed between null and undefined")]
        public void S11_12_A4_T4()
        {
            RunFile("S11.12_A4_T4.js");
        }
    }
}
