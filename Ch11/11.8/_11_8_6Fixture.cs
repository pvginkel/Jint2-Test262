//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;

namespace Jint.Test262.Ch11._11_8
{
    [TestFixture]
    public class _11_8_6Fixture : Test262Fixture
    {
        public _11_8_6Fixture()
            : base("ch11\\11.8\\11.8.6")
        {
        }

        [Test(Description = "Checking by using eval")]
        public void S11_8_6_A1()
        {
            RunFile("S11.8.6_A1.js");
        }

        [Test(Description = "Either Expression is not Reference or GetBase is not null")]
        public void S11_8_6_A2_1_T1()
        {
            RunFile("S11.8.6_A2.1_T1.js");
        }

        [Test(Description = "If GetBase(RelationalExpression) is null, throw ReferenceError")]
        public void S11_8_6_A2_1_T2()
        {
            RunFile("S11.8.6_A2.1_T2.js");
        }

        [Test(Description = "If GetBase(ShiftExpression) is null, throw ReferenceError")]
        public void S11_8_6_A2_1_T3()
        {
            RunFile("S11.8.6_A2.1_T3.js");
        }

        [Test(Description = "Checking with \"=\"")]
        public void S11_8_6_A2_4_T1()
        {
            RunFile("S11.8.6_A2.4_T1.js");
        }

        [Test(Description = "Checking with \"throw\"")]
        public void S11_8_6_A2_4_T2()
        {
            RunFile("S11.8.6_A2.4_T2.js");
        }

        [Test(Description = "Checking with undeclarated variables")]
        public void S11_8_6_A2_4_T3()
        {
            RunFile("S11.8.6_A2.4_T3.js");
        }

        [Test(Description = "Checking all the types of primitives")]
        public void S11_8_6_A3()
        {
            RunFile("S11.8.6_A3.js");
        }

        [Test(Description = "Checking Boolean case")]
        public void S11_8_6_A4_T1()
        {
            RunFile("S11.8.6_A4_T1.js");
        }

        [Test(Description = "Checking Number case")]
        public void S11_8_6_A4_T2()
        {
            RunFile("S11.8.6_A4_T2.js");
        }

        [Test(Description = "Checking String case")]
        public void S11_8_6_A4_T3()
        {
            RunFile("S11.8.6_A4_T3.js");
        }

        [Test(Description = "Checking Error case")]
        public void S11_8_6_A5_T1()
        {
            RunFile("S11.8.6_A5_T1.js");
        }

        [Test(Description = "Checking TypeError case")]
        public void S11_8_6_A5_T2()
        {
            RunFile("S11.8.6_A5_T2.js");
        }

        [Test(Description = "Checking \"this\" case")]
        public void S11_8_6_A6_T1()
        {
            RunFile("S11.8.6_A6_T1.js");
        }

        [Test(Description = "Checking Math case")]
        public void S11_8_6_A6_T2()
        {
            RunFile("S11.8.6_A6_T2.js");
        }

        [Test(Description = "Checking if RelationalExpression is function")]
        public void S11_8_6_A6_T3()
        {
            RunFile("S11.8.6_A6_T3.js");
        }

        [Test(Description = "Checking if RelationalExpression is object")]
        public void S11_8_6_A6_T4()
        {
            RunFile("S11.8.6_A6_T4.js");
        }

        [Test(Description = "Checking Object object")]
        public void S11_8_6_A7_T1()
        {
            RunFile("S11.8.6_A7_T1.js");
        }

        [Test(Description = "Checking Array object")]
        public void S11_8_6_A7_T2()
        {
            RunFile("S11.8.6_A7_T2.js");
        }

        [Test(Description = "Checking Function object")]
        public void S11_8_6_A7_T3()
        {
            RunFile("S11.8.6_A7_T3.js");
        }
    }
}
