//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;

namespace Jint.Test262.Ch11._11_9
{
    [TestFixture]
    public class _11_9_2Fixture : Test262Fixture
    {
        public _11_9_2Fixture()
            : base("ch11\\11.9\\11.9.2")
        {
        }

        [Test(Description = "Checking by using eval")]
        public void S11_9_2_A1()
        {
            RunFile("S11.9.2_A1.js");
        }

        [Test(Description = "Either Type is not Reference or GetBase is not null")]
        public void S11_9_2_A2_1_T1()
        {
            RunFile("S11.9.2_A2.1_T1.js");
        }

        [Test(Description = "If GetBase(x) is null, throw ReferenceError")]
        public void S11_9_2_A2_1_T2()
        {
            RunFile("S11.9.2_A2.1_T2.js");
        }

        [Test(Description = "If GetBase(y) is null, throw ReferenceError")]
        public void S11_9_2_A2_1_T3()
        {
            RunFile("S11.9.2_A2.1_T3.js");
        }

        [Test(Description = "Checking with \"=\"")]
        public void S11_9_2_A2_4_T1()
        {
            RunFile("S11.9.2_A2.4_T1.js");
        }

        [Test(Description = "Checking with \"throw\"")]
        public void S11_9_2_A2_4_T2()
        {
            RunFile("S11.9.2_A2.4_T2.js");
        }

        [Test(Description = "Checking with undeclarated variables")]
        public void S11_9_2_A2_4_T3()
        {
            RunFile("S11.9.2_A2.4_T3.js");
        }

        [Test(Description = "x and y are boolean primitives")]
        public void S11_9_2_A3_1()
        {
            RunFile("S11.9.2_A3.1.js");
        }

        [Test(Description = "x is primitive boolean, y is primitive number")]
        public void S11_9_2_A3_2()
        {
            RunFile("S11.9.2_A3.2.js");
        }

        [Test(Description = "x is primitive number, y is primitive boolean")]
        public void S11_9_2_A3_3()
        {
            RunFile("S11.9.2_A3.3.js");
        }

        [Test(Description = "x is NaN")]
        public void S11_9_2_A4_1_T1()
        {
            RunFile("S11.9.2_A4.1_T1.js");
        }

        [Test(Description = "y is NaN")]
        public void S11_9_2_A4_1_T2()
        {
            RunFile("S11.9.2_A4.1_T2.js");
        }

        [Test(Description = "Checking all combinations")]
        public void S11_9_2_A4_2()
        {
            RunFile("S11.9.2_A4.2.js");
        }

        [Test(Description = "x and y are primitive numbers")]
        public void S11_9_2_A4_3()
        {
            RunFile("S11.9.2_A4.3.js");
        }

        [Test(Description = "x and y are primitive strings")]
        public void S11_9_2_A5_1()
        {
            RunFile("S11.9.2_A5.1.js");
        }

        [Test(Description = "x is primitive number, y is primitive string")]
        public void S11_9_2_A5_2()
        {
            RunFile("S11.9.2_A5.2.js");
        }

        [Test(Description = "x is primitive string, y is primitive number")]
        public void S11_9_2_A5_3()
        {
            RunFile("S11.9.2_A5.3.js");
        }

        [Test(Description = "Checking all combinations")]
        public void S11_9_2_A6_1()
        {
            RunFile("S11.9.2_A6.1.js");
        }

        [Test(Description = "x is null or undefined, y is not")]
        public void S11_9_2_A6_2_T1()
        {
            RunFile("S11.9.2_A6.2_T1.js");
        }

        [Test(Description = "y is null or undefined, x is not")]
        public void S11_9_2_A6_2_T2()
        {
            RunFile("S11.9.2_A6.2_T2.js");
        }

        [Test(Description = "Checking Boolean object, Number object, String object, Object object")]
        public void S11_9_2_A7_1()
        {
            RunFile("S11.9.2_A7.1.js");
        }

        [Test(Description = "x is object, y is primitive boolean")]
        public void S11_9_2_A7_2()
        {
            RunFile("S11.9.2_A7.2.js");
        }

        [Test(Description = "y is object, x is primitive boolean")]
        public void S11_9_2_A7_3()
        {
            RunFile("S11.9.2_A7.3.js");
        }

        [Test(Description = "x is object, y is primitive number")]
        public void S11_9_2_A7_4()
        {
            RunFile("S11.9.2_A7.4.js");
        }

        [Test(Description = "y is object, x is primitive number")]
        public void S11_9_2_A7_5()
        {
            RunFile("S11.9.2_A7.5.js");
        }

        [Test(Description = "x is object, y is primitive string")]
        public void S11_9_2_A7_6()
        {
            RunFile("S11.9.2_A7.6.js");
        }

        [Test(Description = "y is object, x is primitive string")]
        public void S11_9_2_A7_7()
        {
            RunFile("S11.9.2_A7.7.js");
        }

        [Test(Description = "x is object, y is primtitive")]
        public void S11_9_2_A7_8()
        {
            RunFile("S11.9.2_A7.8.js");
        }

        [Test(Description = "y is object, x is primtitive")]
        public void S11_9_2_A7_9()
        {
            RunFile("S11.9.2_A7.9.js");
        }
    }
}
