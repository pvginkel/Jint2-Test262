//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;

namespace Jint.Test262.Ch11._11_3
{
    [TestFixture]
    public class _11_3_2Fixture : Test262Fixture
    {
        public _11_3_2Fixture()
            : base("ch11\\11.3\\11.3.2")
        {
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier 'arguments' appear as a PostfixExpression(arguments--)")]
        public void _11_3_2_2_1_s()
        {
            RunFile("11.3.2-2-1-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier 'eval' appear as a PostfixExpression(eval--)")]
        public void _11_3_2_2_2_s()
        {
            RunFile("11.3.2-2-2-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is not thrown if the identifier 'arguments[...]' appears as a PostfixExpression(arguments--)")]
        public void _11_3_2_2_3_s()
        {
            RunFile("11.3.2-2-3-s.js");
        }

        [Test(Description = "Checking Line Feed")]
        [ExpectedException]
        public void S11_3_2_A1_1_T1()
        {
            RunFile("S11.3.2_A1.1_T1.js");
        }

        [Test(Description = "Checking Carriage Return")]
        [ExpectedException]
        public void S11_3_2_A1_1_T2()
        {
            RunFile("S11.3.2_A1.1_T2.js");
        }

        [Test(Description = "Checking Page separator")]
        [ExpectedException]
        public void S11_3_2_A1_1_T3()
        {
            RunFile("S11.3.2_A1.1_T3.js");
        }

        [Test(Description = "Checking Line separator")]
        [ExpectedException]
        public void S11_3_2_A1_1_T4()
        {
            RunFile("S11.3.2_A1.1_T4.js");
        }

        [Test(Description = "Checking by using eval")]
        public void S11_3_2_A1_2_T1()
        {
            RunFile("S11.3.2_A1.2_T1.js");
        }

        [Test(Description = "Type(x) is Reference and GetBase(x) is not null")]
        public void S11_3_2_A2_1_T1()
        {
            RunFile("S11.3.2_A2.1_T1.js");
        }

        [Test(Description = "If GetBase(x) is null, throw ReferenceError")]
        public void S11_3_2_A2_1_T2()
        {
            RunFile("S11.3.2_A2.1_T2.js");
        }

        [Test(Description = "If Type(x) is not Reference, throw ReferenceError (or SyntaxError)")]
        [ExpectedException]
        public void S11_3_2_A2_1_T3()
        {
            RunFile("S11.3.2_A2.1_T3.js");
        }

        [Test(Description = "If Type(value) is Object, evaluate ToPrimitive(value, Number)")]
        public void S11_3_2_A2_2_T1()
        {
            RunFile("S11.3.2_A2.2_T1.js");
        }

        [Test(Description = "Type(x) is boolean primitive or Boolean object")]
        public void S11_3_2_A3_T1()
        {
            RunFile("S11.3.2_A3_T1.js");
        }

        [Test(Description = "Type(x) is number primitive or Number object")]
        public void S11_3_2_A3_T2()
        {
            RunFile("S11.3.2_A3_T2.js");
        }

        [Test(Description = "Type(x) is string primitive or String object")]
        public void S11_3_2_A3_T3()
        {
            RunFile("S11.3.2_A3_T3.js");
        }

        [Test(Description = "Type(x) is undefined or null")]
        public void S11_3_2_A3_T4()
        {
            RunFile("S11.3.2_A3_T4.js");
        }

        [Test(Description = "Type(x) is Object object or Function object")]
        public void S11_3_2_A3_T5()
        {
            RunFile("S11.3.2_A3_T5.js");
        }

        [Test(Description = "Type(x) is boolean primitive or Boolean object")]
        public void S11_3_2_A4_T1()
        {
            RunFile("S11.3.2_A4_T1.js");
        }

        [Test(Description = "Type(x) is number primitive or Number object")]
        public void S11_3_2_A4_T2()
        {
            RunFile("S11.3.2_A4_T2.js");
        }

        [Test(Description = "Type(x) is string primitive or String object")]
        public void S11_3_2_A4_T3()
        {
            RunFile("S11.3.2_A4_T3.js");
        }

        [Test(Description = "If Type(x) is undefined or null")]
        public void S11_3_2_A4_T4()
        {
            RunFile("S11.3.2_A4_T4.js");
        }

        [Test(Description = "Type(x) is Object object or Function object")]
        public void S11_3_2_A4_T5()
        {
            RunFile("S11.3.2_A4_T5.js");
        }
    }
}
