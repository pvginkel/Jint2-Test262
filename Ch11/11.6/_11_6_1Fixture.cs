//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;

namespace Jint.Test262.Ch11._11_6
{
    [TestFixture]
    public class _11_6_1Fixture : Test262Fixture
    {
        public _11_6_1Fixture()
            : base("ch11\\11.6\\11.6.1")
        {
        }

        [Test(Description = "Checking by using eval")]
        public void S11_6_1_A1()
        {
            RunFile("S11.6.1_A1.js");
        }

        [Test(Description = "Either Type is not Reference or GetBase is not null")]
        public void S11_6_1_A2_1_T1()
        {
            RunFile("S11.6.1_A2.1_T1.js");
        }

        [Test(Description = "If GetBase(x) is null, throw ReferenceError")]
        public void S11_6_1_A2_1_T2()
        {
            RunFile("S11.6.1_A2.1_T2.js");
        }

        [Test(Description = "If GetBase(y) is null, throw ReferenceError")]
        public void S11_6_1_A2_1_T3()
        {
            RunFile("S11.6.1_A2.1_T3.js");
        }

        [Test(Description = "If Type(value) is Object, evaluate ToPrimitive(value, Number)")]
        public void S11_6_1_A2_2_T1()
        {
            RunFile("S11.6.1_A2.2_T1.js");
        }

        [Test(Description = "If Type(value) is Date object, evaluate ToPrimitive(value, String)")]
        public void S11_6_1_A2_2_T2()
        {
            RunFile("S11.6.1_A2.2_T2.js");
        }

        [Test(Description = "If Type(value) is Function, evaluate ToPrimitive(value, Number)")]
        public void S11_6_1_A2_2_T3()
        {
            RunFile("S11.6.1_A2.2_T3.js");
        }

        [Test(Description = "Checking with \"throw\"")]
        public void S11_6_1_A2_3_T1()
        {
            RunFile("S11.6.1_A2.3_T1.js");
        }

        [Test(Description = "Checking with \"=\"")]
        public void S11_6_1_A2_4_T1()
        {
            RunFile("S11.6.1_A2.4_T1.js");
        }

        [Test(Description = "Checking with \"throw\"")]
        public void S11_6_1_A2_4_T2()
        {
            RunFile("S11.6.1_A2.4_T2.js");
        }

        [Test(Description = "Checking with undeclarated variables")]
        public void S11_6_1_A2_4_T3()
        {
            RunFile("S11.6.1_A2.4_T3.js");
        }

        [Test(Description = "Type(Primitive(x)) and Type(Primitive(y)) vary between primitive boolean and Boolean object")]
        public void S11_6_1_A3_1_T1_1()
        {
            RunFile("S11.6.1_A3.1_T1.1.js");
        }

        [Test(Description = "Type(Primitive(x)) and Type(Primitive(y)) vary between primitive number and Number object")]
        public void S11_6_1_A3_1_T1_2()
        {
            RunFile("S11.6.1_A3.1_T1.2.js");
        }

        [Test(Description = "Type(Primitive(x)) and Type(Primitive(y)) vary between Null and Undefined")]
        public void S11_6_1_A3_1_T1_3()
        {
            RunFile("S11.6.1_A3.1_T1.3.js");
        }

        [Test(Description = "Type(Primitive(x)) is different from Type(Primitive(y)) and both types vary between Number (primitive or object) or Boolean (primitive and object)")]
        public void S11_6_1_A3_1_T2_1()
        {
            RunFile("S11.6.1_A3.1_T2.1.js");
        }

        [Test(Description = "Type(Primitive(x)) is different from Type(Primitive(y)) and both types vary between Number (primitive or object) and Null")]
        public void S11_6_1_A3_1_T2_2()
        {
            RunFile("S11.6.1_A3.1_T2.2.js");
        }

        [Test(Description = "Type(Primitive(x)) is different from Type(Primitive(y)) and both types vary between Number (primitive or object) and Undefined")]
        public void S11_6_1_A3_1_T2_3()
        {
            RunFile("S11.6.1_A3.1_T2.3.js");
        }

        [Test(Description = "Type(Primitive(x)) is different from Type(Primitive(y)) and both types vary between Boolean (primitive or object) and Undefined")]
        public void S11_6_1_A3_1_T2_4()
        {
            RunFile("S11.6.1_A3.1_T2.4.js");
        }

        [Test(Description = "Type(Primitive(x)) is different from Type(Primitive(y)) and both types vary between Boolean (primitive or object) and Null")]
        public void S11_6_1_A3_1_T2_5()
        {
            RunFile("S11.6.1_A3.1_T2.5.js");
        }

        [Test(Description = "Type(Primitive(x)) and Type(Primitive(y)) vary between primitive string and String object")]
        public void S11_6_1_A3_2_T1_1()
        {
            RunFile("S11.6.1_A3.2_T1.1.js");
        }

        [Test(Description = "Type(Primitive(x)) and Type(Primitive(y)) vary between Object object and Function object")]
        public void S11_6_1_A3_2_T1_2()
        {
            RunFile("S11.6.1_A3.2_T1.2.js");
        }

        [Test(Description = "Type(Primitive(x)) is different from Type(Primitive(y)) and both types vary between Number (primitive or object) and String (primitive and object)")]
        public void S11_6_1_A3_2_T2_1()
        {
            RunFile("S11.6.1_A3.2_T2.1.js");
        }

        [Test(Description = "Type(Primitive(x)) is different from Type(Primitive(y)) and both types vary between String (primitive or object) and Boolean (primitive and object)")]
        public void S11_6_1_A3_2_T2_2()
        {
            RunFile("S11.6.1_A3.2_T2.2.js");
        }

        [Test(Description = "Type(Primitive(x)) is different from Type(Primitive(y)) and both types vary between String (primitive or object) and Undefined")]
        public void S11_6_1_A3_2_T2_3()
        {
            RunFile("S11.6.1_A3.2_T2.3.js");
        }

        [Test(Description = "Type(Primitive(x)) is different from Type(Primitive(y)) and both types vary between String (primitive or object) and Null")]
        public void S11_6_1_A3_2_T2_4()
        {
            RunFile("S11.6.1_A3.2_T2.4.js");
        }

        [Test(Description = "If either operand is NaN, the result is NaN")]
        public void S11_6_1_A4_T1()
        {
            RunFile("S11.6.1_A4_T1.js");
        }

        [Test(Description = "The sum of two infinities of opposite sign is NaN")]
        public void S11_6_1_A4_T2()
        {
            RunFile("S11.6.1_A4_T2.js");
        }

        [Test(Description = "The sum of two infinities of the same sign is the infinity of that sign")]
        public void S11_6_1_A4_T3()
        {
            RunFile("S11.6.1_A4_T3.js");
        }

        [Test(Description = "The sum of an infinity and a finite value is equal to the infinite operand")]
        public void S11_6_1_A4_T4()
        {
            RunFile("S11.6.1_A4_T4.js");
        }

        [Test(Description = "The sum of two negative zeros is -0. The sum of two positive zeros, or of two zeros of opposite sign is +0")]
        public void S11_6_1_A4_T5()
        {
            RunFile("S11.6.1_A4_T5.js");
        }

        [Test(Description = "The sum of a zero and a nonzero finite value is equal to the nonzero operand")]
        public void S11_6_1_A4_T6()
        {
            RunFile("S11.6.1_A4_T6.js");
        }

        [Test(Description = "The sum of two nonzero finite values of the same magnitude and opposite sign is +0")]
        public void S11_6_1_A4_T7()
        {
            RunFile("S11.6.1_A4_T7.js");
        }

        [Test(Description = "If the magnitude is too large to represent, the operation overflows and the result is then an infinity of appropriate sign")]
        public void S11_6_1_A4_T8()
        {
            RunFile("S11.6.1_A4_T8.js");
        }

        [Test(Description = "The addition operator is not always associative ( x + y + z is the same (x + y) + z, not x + (y + z))")]
        public void S11_6_1_A4_T9()
        {
            RunFile("S11.6.1_A4_T9.js");
        }
    }
}
