//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;

namespace Jint.Test262.Ch11._11_11
{
    [TestFixture]
    public class _11_11_2Fixture : Test262Fixture
    {
        public _11_11_2Fixture()
            : base("ch11\\11.11\\11.11.2")
        {
        }

        [Test(Description = "Checking by using eval")]
        public void S11_11_2_A1()
        {
            RunFile("S11.11.2_A1.js");
        }

        [Test(Description = "Either Type is not Reference or GetBase is not null")]
        public void S11_11_2_A2_1_T1()
        {
            RunFile("S11.11.2_A2.1_T1.js");
        }

        [Test(Description = "If GetBase(x) is null, throw ReferenceError")]
        public void S11_11_2_A2_1_T2()
        {
            RunFile("S11.11.2_A2.1_T2.js");
        }

        [Test(Description = "If ToBoolean(x) is false and GetBase(y) is null, throw ReferenceError")]
        public void S11_11_2_A2_1_T3()
        {
            RunFile("S11.11.2_A2.1_T3.js");
        }

        [Test(Description = "If ToBoolean(x) is true and GetBase(y) is null, return true")]
        public void S11_11_2_A2_1_T4()
        {
            RunFile("S11.11.2_A2.1_T4.js");
        }

        [Test(Description = "Checking with \"=\"")]
        public void S11_11_2_A2_4_T1()
        {
            RunFile("S11.11.2_A2.4_T1.js");
        }

        [Test(Description = "Checking with \"throw\"")]
        public void S11_11_2_A2_4_T2()
        {
            RunFile("S11.11.2_A2.4_T2.js");
        }

        [Test(Description = "Checking with undeclarated variables")]
        public void S11_11_2_A2_4_T3()
        {
            RunFile("S11.11.2_A2.4_T3.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive boolean and Boolean object")]
        public void S11_11_2_A3_T1()
        {
            RunFile("S11.11.2_A3_T1.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive number and Number object")]
        public void S11_11_2_A3_T2()
        {
            RunFile("S11.11.2_A3_T2.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive string and String object")]
        public void S11_11_2_A3_T3()
        {
            RunFile("S11.11.2_A3_T3.js");
        }

        [Test(Description = "Type(x) or Type(y) is changed between null and undefined")]
        public void S11_11_2_A3_T4()
        {
            RunFile("S11.11.2_A3_T4.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive boolean and Boolean object")]
        public void S11_11_2_A4_T1()
        {
            RunFile("S11.11.2_A4_T1.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive number and Number object")]
        public void S11_11_2_A4_T2()
        {
            RunFile("S11.11.2_A4_T2.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive string and String object")]
        public void S11_11_2_A4_T3()
        {
            RunFile("S11.11.2_A4_T3.js");
        }

        [Test(Description = "Type(x) or Type(y) vary between Null and Undefined")]
        public void S11_11_2_A4_T4()
        {
            RunFile("S11.11.2_A4_T4.js");
        }
    }
}
