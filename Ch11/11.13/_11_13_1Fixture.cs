//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;

namespace Jint.Test262.Ch11._11_13
{
    [TestFixture]
    public class _11_13_1Fixture : Test262Fixture
    {
        public _11_13_1Fixture()
            : base("ch11\\11.13\\11.13.1")
        {
        }

        [Test(Description = "simple assignment throws ReferenceError if LeftHandSide is not a reference (number)")]
        public void _11_13_1_1_1()
        {
            RunFile("11.13.1-1-1.js");
        }

        [Test(Description = "simple assignment throws ReferenceError if LeftHandSide is not a reference (string)")]
        public void _11_13_1_1_2()
        {
            RunFile("11.13.1-1-2.js");
        }

        [Test(Description = "simple assignment throws ReferenceError if LeftHandSide is not a reference (boolean)")]
        public void _11_13_1_1_3()
        {
            RunFile("11.13.1-1-3.js");
        }

        [Test(Description = "simple assignment throws ReferenceError if LeftHandSide is not a reference (null)")]
        public void _11_13_1_1_4()
        {
            RunFile("11.13.1-1-4.js");
        }

        [Test(Description = "simple assignment throws ReferenceError if LeftHandSide is an unresolvable reference in strict mode (base obj undefined)")]
        public void _11_13_1_1_6_s()
        {
            RunFile("11.13.1-1-6-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide is a reference to a data property with the attribute value {[[Writable]]:false} under strict mode")]
        public void _11_13_1_1_s()
        {
            RunFile("11.13.1-1-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide is a reference to an accessor property with the attribute value {[[Set]]:undefined} under strict mode")]
        public void _11_13_1_2_s()
        {
            RunFile("11.13.1-2-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide is a reference to a non-existent property of an object whose [[Extensible]] internal property has the value false under strict mode")]
        public void _11_13_1_3_s()
        {
            RunFile("11.13.1-3-s.js");
        }

        [Test(Description = "simple assignment creates property on the global object if LeftHandSide is an unresolvable reference")]
        public void _11_13_1_4_1()
        {
            RunFile("11.13.1-4-1.js");
        }

        [Test(Description = "simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Number.MAX_VALUE)")]
        public void _11_13_1_4_14_s()
        {
            RunFile("11.13.1-4-14-s.js");
        }

        [Test(Description = "simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Global.undefined)")]
        public void _11_13_1_4_27_s()
        {
            RunFile("11.13.1-4-27-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier 'eval' appears as the LeftHandSideExpression of simple assignment(=) under strict mode")]
        public void _11_13_1_4_28_s()
        {
            RunFile("11.13.1-4-28-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier 'Math.PI' appears as the LeftHandSideExpression of simple assignment(=)")]
        [ExpectedException]
        public void _11_13_1_4_28gs()
        {
            RunFile("11.13.1-4-28gs.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier 'arguments' appears as the LeftHandSideExpression of simple assignment(=) under strict mode")]
        public void _11_13_1_4_29_s()
        {
            RunFile("11.13.1-4-29-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier 'Math.PI' appears as the LeftHandSideExpression of simple assignment(=)")]
        [ExpectedException]
        public void _11_13_1_4_29gs()
        {
            RunFile("11.13.1-4-29gs.js");
        }

        [Test(Description = "simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Global.Infinity)")]
        public void _11_13_1_4_3_s()
        {
            RunFile("11.13.1-4-3-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier 'eval' appears as the LeftHandSideExpression (PrimaryExpression) of simple assignment(=) under strict mode")]
        public void _11_13_1_4_30_s()
        {
            RunFile("11.13.1-4-30-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier 'arguments' appears as the LeftHandSideExpression (PrimaryExpression) of simple assignment(=) under strict mode")]
        public void _11_13_1_4_31_s()
        {
            RunFile("11.13.1-4-31-s.js");
        }

        [Test(Description = "simple assignment throws TypeError if LeftHandSide is a readonly property in strict mode (Function.length)")]
        public void _11_13_1_4_6_s()
        {
            RunFile("11.13.1-4-6-s.js");
        }

        [Test(Description = "Checking by using eval")]
        public void S11_13_1_A1()
        {
            RunFile("S11.13.1_A1.js");
        }

        [Test(Description = "Either AssigmentExpression is not Reference or GetBase is not null")]
        public void S11_13_1_A2_1_T1()
        {
            RunFile("S11.13.1_A2.1_T1.js");
        }

        [Test(Description = "If GetBase(AssigmentExpression) is null, throw ReferenceError")]
        public void S11_13_1_A2_1_T2()
        {
            RunFile("S11.13.1_A2.1_T2.js");
        }

        [Test(Description = "If Type(LeftHandSideExpression) is not Reference, throw ReferenceError (or SyntaxError)")]
        [ExpectedException]
        public void S11_13_1_A2_1_T3()
        {
            RunFile("S11.13.1_A2.1_T3.js");
        }

        [Test(Description = "Checking Expression and Variable statements")]
        public void S11_13_1_A3_1()
        {
            RunFile("S11.13.1_A3.1.js");
        }

        [Test(Description = "Checking Expression and Variable statements")]
        public void S11_13_1_A3_2()
        {
            RunFile("S11.13.1_A3.2.js");
        }

        [Test(Description = "Syntax check")]
        public void S11_13_1_A4_T1()
        {
            RunFile("S11.13.1_A4_T1.js");
        }

        [Test(Description = "Syntax check if \"x = x\" throws ReferenceError")]
        public void S11_13_1_A4_T2()
        {
            RunFile("S11.13.1_A4_T2.js");
        }
    }
}
