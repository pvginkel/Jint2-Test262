//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;

namespace Jint.Test262.Ch11._11_13
{
    [TestFixture]
    public class _11_13_2Fixture : Test262Fixture
    {
        public _11_13_2Fixture()
            : base("ch11\\11.13\\11.13.2")
        {
        }

        [Test(Description = "Strict Mode - ReferenceError is thrown if the LeftHandSideExpression of a Compound Assignment operator(*=) evaluates to an unresolvable reference")]
        public void _11_13_2_1_s()
        {
            RunFile("11.13.2-1-s.js");
        }

        [Test(Description = "Strict Mode - ReferenceError is thrown if the LeftHandSideExpression of a Compound Assignment operator(^=) evaluates to an unresolvable reference")]
        public void _11_13_2_10_s()
        {
            RunFile("11.13.2-10-s.js");
        }

        [Test(Description = "Strict Mode - ReferenceError is thrown if the LeftHandSideExpression of a Compound Assignment operator(|=) evaluates to an unresolvable reference")]
        public void _11_13_2_11_s()
        {
            RunFile("11.13.2-11-s.js");
        }

        [Test(Description = "Strict Mode - ReferenceError isn't thrown if the LeftHandSideExpression of a Compound Assignment operator(*=) evaluates to a resolvable reference")]
        public void _11_13_2_12_s()
        {
            RunFile("11.13.2-12-s.js");
        }

        [Test(Description = "Strict Mode - ReferenceError isn't thrown if the LeftHandSideExpression of a Compound Assignment operator(/=) evaluates to a resolvable reference")]
        public void _11_13_2_13_s()
        {
            RunFile("11.13.2-13-s.js");
        }

        [Test(Description = "Strict Mode - ReferenceError isn't thrown if the LeftHandSideExpression of a Compound Assignment operator(%=) evaluates to a resolvable reference")]
        public void _11_13_2_14_s()
        {
            RunFile("11.13.2-14-s.js");
        }

        [Test(Description = "Strict Mode - ReferenceError isn't thrown if the LeftHandSideExpression of a Compound Assignment operator(>>>=) evaluates to a resolvable reference")]
        public void _11_13_2_15_s()
        {
            RunFile("11.13.2-15-s.js");
        }

        [Test(Description = "Strict Mode - ReferenceError isn't thrown if the LeftHandSideExpression of a Compound Assignment operator(-=) evaluates to a resolvable reference")]
        public void _11_13_2_16_s()
        {
            RunFile("11.13.2-16-s.js");
        }

        [Test(Description = "Strict Mode - ReferenceError isn't thrown if the LeftHandSideExpression of a Compound Assignment operator(<<=) evaluates to a resolvable reference")]
        public void _11_13_2_17_s()
        {
            RunFile("11.13.2-17-s.js");
        }

        [Test(Description = "Strict Mode - ReferenceError isn't thrown if the LeftHandSideExpression of a Compound Assignment operator(>>=) evaluates to a resolvable reference")]
        public void _11_13_2_18_s()
        {
            RunFile("11.13.2-18-s.js");
        }

        [Test(Description = "Strict Mode - ReferenceError isn't thrown if the LeftHandSideExpression of a Compound Assignment operator(+=) evaluates to a resolvable reference")]
        public void _11_13_2_19_s()
        {
            RunFile("11.13.2-19-s.js");
        }

        [Test(Description = "Strict Mode - ReferenceError is thrown if the LeftHandSideExpression of a Compound Assignment operator(/=) evaluates to an unresolvable reference")]
        public void _11_13_2_2_s()
        {
            RunFile("11.13.2-2-s.js");
        }

        [Test(Description = "Strict Mode - ReferenceError isn't thrown if the LeftHandSideExpression of a Compound Assignment operator(&=) evaluates to a resolvable reference")]
        public void _11_13_2_20_s()
        {
            RunFile("11.13.2-20-s.js");
        }

        [Test(Description = "Strict Mode - ReferenceError isn't thrown if the LeftHandSideExpression of a Compound Assignment operator(^=) evaluates to a resolvable reference")]
        public void _11_13_2_21_s()
        {
            RunFile("11.13.2-21-s.js");
        }

        [Test(Description = "Strict Mode - ReferenceError isn't thrown if the LeftHandSideExpression of a Compound Assignment operator(|=) evaluates to a resolvable reference")]
        public void _11_13_2_22_s()
        {
            RunFile("11.13.2-22-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(*=) is a reference to a data property with the attribute value {[[Writable]]:false}")]
        public void _11_13_2_23_s()
        {
            RunFile("11.13.2-23-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(/=) is a reference to a data property with the attribute value {[[Writable]]:false}")]
        public void _11_13_2_24_s()
        {
            RunFile("11.13.2-24-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(%=) is a reference to a data property with the attribute value {[[Writable]]:false}")]
        public void _11_13_2_25_s()
        {
            RunFile("11.13.2-25-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(+=) is a reference to a data property with the attribute value {[[Writable]]:false}")]
        public void _11_13_2_26_s()
        {
            RunFile("11.13.2-26-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(-=) is a reference to a data property with the attribute value {[[Writable]]:false}")]
        public void _11_13_2_27_s()
        {
            RunFile("11.13.2-27-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(<<=) is a reference to a data property with the attribute value {[[Writable]]:false}")]
        public void _11_13_2_28_s()
        {
            RunFile("11.13.2-28-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(>>=) is a reference to a data property with the attribute value {[[Writable]]:false}")]
        public void _11_13_2_29_s()
        {
            RunFile("11.13.2-29-s.js");
        }

        [Test(Description = "Strict Mode - ReferenceError is thrown if the LeftHandSideExpression of a Compound Assignment operator(%=) evaluates to an unresolvable reference")]
        public void _11_13_2_3_s()
        {
            RunFile("11.13.2-3-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(>>>=) is a reference to a data property with the attribute value {[[Writable]]:false}")]
        public void _11_13_2_30_s()
        {
            RunFile("11.13.2-30-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(&=) is a reference to a data property with the attribute value {[[Writable]]:false}")]
        public void _11_13_2_31_s()
        {
            RunFile("11.13.2-31-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(^=) is a reference to a data property with the attribute value {[[Writable]]:false}")]
        public void _11_13_2_32_s()
        {
            RunFile("11.13.2-32-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(|=) is a reference to a data property with the attribute value {[[Writable]]:false}")]
        public void _11_13_2_33_s()
        {
            RunFile("11.13.2-33-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(*=) is a reference to an accessor property with the attribute value {[[Set]]:undefined}")]
        public void _11_13_2_34_s()
        {
            RunFile("11.13.2-34-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(/=) is a reference to an accessor property with the attribute value {[[Set]]:undefined}")]
        public void _11_13_2_35_s()
        {
            RunFile("11.13.2-35-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(%=) is a reference to an accessor property with the attribute value {[[Set]]:undefined}")]
        public void _11_13_2_36_s()
        {
            RunFile("11.13.2-36-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(+=) is a reference to an accessor property with the attribute value {[[Set]]:undefined}")]
        public void _11_13_2_37_s()
        {
            RunFile("11.13.2-37-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(-=) is a reference to an accessor property with the attribute value {[[Set]]:undefined}")]
        public void _11_13_2_38_s()
        {
            RunFile("11.13.2-38-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(<<=) is a reference to an accessor property with the attribute value {[[Set]]:undefined}")]
        public void _11_13_2_39_s()
        {
            RunFile("11.13.2-39-s.js");
        }

        [Test(Description = "Strict Mode - ReferenceError is thrown if the LeftHandSideExpression of a Compound Assignment operator(+=) evaluates to an unresolvable reference")]
        public void _11_13_2_4_s()
        {
            RunFile("11.13.2-4-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(>>=) is a reference to an accessor property with the attribute value {[[Set]]:undefined}")]
        public void _11_13_2_40_s()
        {
            RunFile("11.13.2-40-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(>>>=) is a reference to an accessor property with the attribute value {[[Set]]:undefined}")]
        public void _11_13_2_41_s()
        {
            RunFile("11.13.2-41-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(&=) is a reference to an accessor property with the attribute value {[[Set]]:undefined}")]
        public void _11_13_2_42_s()
        {
            RunFile("11.13.2-42-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(^=) is a reference to an accessor property with the attribute value {[[Set]]:undefined}")]
        public void _11_13_2_43_s()
        {
            RunFile("11.13.2-43-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(|=) is a reference of to an accessor property with the attribute value {[[Set]]:undefined}")]
        public void _11_13_2_44_s()
        {
            RunFile("11.13.2-44-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(*=) is a reference to a non-existent property of an object whose [[Extensible]] internal property if false")]
        public void _11_13_2_45_s()
        {
            RunFile("11.13.2-45-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(/=) is a reference to a non-existent property of an object whose [[Extensible]] internal property if false")]
        public void _11_13_2_46_s()
        {
            RunFile("11.13.2-46-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(%=) is a reference to a non-existent property of an object whose [[Extensible]] internal property if false")]
        public void _11_13_2_47_s()
        {
            RunFile("11.13.2-47-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(+=) is a reference to a non-existent property of an object whose [[Extensible]] internal property if false")]
        public void _11_13_2_48_s()
        {
            RunFile("11.13.2-48-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(-=) is a reference to a non-existent property of an object whose [[Extensible]] internal property if false")]
        public void _11_13_2_49_s()
        {
            RunFile("11.13.2-49-s.js");
        }

        [Test(Description = "Strict Mode - ReferenceError is thrown if the LeftHandSideExpression of a Compound Assignment operator(-=) evaluates to an unresolvable reference")]
        public void _11_13_2_5_s()
        {
            RunFile("11.13.2-5-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(<<=) is a reference to a non-existent property of an object whose [[Extensible]] internal property if false")]
        public void _11_13_2_50_s()
        {
            RunFile("11.13.2-50-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(>>=) is a reference to a non-existent property of an object whose [[Extensible]] internal property if false")]
        public void _11_13_2_51_s()
        {
            RunFile("11.13.2-51-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(>>>=) is a reference to a non-existent property of an object whose [[Extensible]] internal property if false")]
        public void _11_13_2_52_s()
        {
            RunFile("11.13.2-52-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(&=) is a reference to a non-existent property of an object whose [[Extensible]] internal property if false")]
        public void _11_13_2_53_s()
        {
            RunFile("11.13.2-53-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(^=) is a reference to a non-existent property of an object whose [[Extensible]] internal property if false")]
        public void _11_13_2_54_s()
        {
            RunFile("11.13.2-54-s.js");
        }

        [Test(Description = "Strict Mode - TypeError is thrown if The LeftHandSide of a Compound Assignment operator(|=) is a reference to a non-existent property of an object whose [[Extensible]] internal property if false")]
        public void _11_13_2_55_s()
        {
            RunFile("11.13.2-55-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier eval appear as the LeftHandSideExpression of a Compound Assignment operator(*=)")]
        public void _11_13_2_6_1_s()
        {
            RunFile("11.13.2-6-1-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier eval appear as the LeftHandSideExpression of a Compound Assignment operator(^=)")]
        public void _11_13_2_6_10_s()
        {
            RunFile("11.13.2-6-10-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier eval appear as the LeftHandSideExpression of a Compound Assignment operator(|=)")]
        public void _11_13_2_6_11_s()
        {
            RunFile("11.13.2-6-11-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier arguments appear as the LeftHandSideExpression of a Compound Assignment operator(*=)")]
        public void _11_13_2_6_12_s()
        {
            RunFile("11.13.2-6-12-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier arguments appear as the LeftHandSideExpression of a Compound Assignment operator(/=)")]
        public void _11_13_2_6_13_s()
        {
            RunFile("11.13.2-6-13-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier arguments appear as the LeftHandSideExpression of a Compound Assignment operator(%=)")]
        public void _11_13_2_6_14_s()
        {
            RunFile("11.13.2-6-14-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier arguments appear as the LeftHandSideExpression of a Compound Assignment operator(+=)")]
        public void _11_13_2_6_15_s()
        {
            RunFile("11.13.2-6-15-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier arguments appear as the LeftHandSideExpression of a Compound Assignment operator(-=)")]
        public void _11_13_2_6_16_s()
        {
            RunFile("11.13.2-6-16-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier arguments appear as the LeftHandSideExpression of a Compound Assignment operator(<<=)")]
        public void _11_13_2_6_17_s()
        {
            RunFile("11.13.2-6-17-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier arguments appear as the LeftHandSideExpression of a Compound Assignment operator(>>=)")]
        public void _11_13_2_6_18_s()
        {
            RunFile("11.13.2-6-18-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier arguments appear as the LeftHandSideExpression of a Compound Assignment operator(>>>=)")]
        public void _11_13_2_6_19_s()
        {
            RunFile("11.13.2-6-19-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is throw if the identifier eval appears as the LeftHandSideExpression of a Compound Assignment operator(*=)")]
        [ExpectedException]
        public void _11_13_2_6_1gs()
        {
            RunFile("11.13.2-6-1gs.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier eval appear as the LeftHandSideExpression of a Compound Assignment operator(/=)")]
        public void _11_13_2_6_2_s()
        {
            RunFile("11.13.2-6-2-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier arguments appear as the LeftHandSideExpression of a Compound Assignment operator(&=)")]
        public void _11_13_2_6_20_s()
        {
            RunFile("11.13.2-6-20-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier arguments appear as the LeftHandSideExpression of a Compound Assignment operator(^=)")]
        public void _11_13_2_6_21_s()
        {
            RunFile("11.13.2-6-21-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier arguments appear as the LeftHandSideExpression of a Compound Assignment operator(|=)")]
        public void _11_13_2_6_22_s()
        {
            RunFile("11.13.2-6-22-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier eval appear as the LeftHandSideExpression of a Compound Assignment operator(%=)")]
        public void _11_13_2_6_3_s()
        {
            RunFile("11.13.2-6-3-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier eval appear as the LeftHandSideExpression of a Compound Assignment operator(+=)")]
        public void _11_13_2_6_4_s()
        {
            RunFile("11.13.2-6-4-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier eval appear as the LeftHandSideExpression of a Compound Assignment operator(-=)")]
        public void _11_13_2_6_5_s()
        {
            RunFile("11.13.2-6-5-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier eval appear as the LeftHandSideExpression of a Compound Assignment operator(<<=)")]
        public void _11_13_2_6_6_s()
        {
            RunFile("11.13.2-6-6-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier eval appear as the LeftHandSideExpression of a Compound Assignment operator(>>=)")]
        public void _11_13_2_6_7_s()
        {
            RunFile("11.13.2-6-7-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier eval appear as the LeftHandSideExpression of a Compound Assignment operator(>>>=)")]
        public void _11_13_2_6_8_s()
        {
            RunFile("11.13.2-6-8-s.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown if the identifier eval appear as the LeftHandSideExpression of a Compound Assignment operator(&=)")]
        public void _11_13_2_6_9_s()
        {
            RunFile("11.13.2-6-9-s.js");
        }

        [Test(Description = "Strict Mode - ReferenceError is thrown if the LeftHandSideExpression of a Compound Assignment operator(<<=) evaluates to an unresolvable reference")]
        public void _11_13_2_6_s()
        {
            RunFile("11.13.2-6-s.js");
        }

        [Test(Description = "Strict Mode - ReferenceError is thrown if the LeftHandSideExpression of a Compound Assignment operator(>>=) evaluates to an unresolvable reference")]
        public void _11_13_2_7_s()
        {
            RunFile("11.13.2-7-s.js");
        }

        [Test(Description = "Strict Mode - ReferenceError is thrown if the LeftHandSideExpression of a Compound Assignment operator(>>>=) evaluates to an unresolvable reference")]
        public void _11_13_2_8_s()
        {
            RunFile("11.13.2-8-s.js");
        }

        [Test(Description = "Strict Mode - ReferenceError is thrown if the LeftHandSideExpression of a Compound Assignment operator(&=) evaluates to an unresolvable reference")]
        public void _11_13_2_9_s()
        {
            RunFile("11.13.2-9-s.js");
        }

        [Test(Description = "Checking by using eval, check operator is x *= y")]
        public void S11_13_2_A1_T1()
        {
            RunFile("S11.13.2_A1_T1.js");
        }

        [Test(Description = "Checking by using eval, check operator is x ^= y")]
        public void S11_13_2_A1_T10()
        {
            RunFile("S11.13.2_A1_T10.js");
        }

        [Test(Description = "Checking by using eval, check operator is x |= y")]
        public void S11_13_2_A1_T11()
        {
            RunFile("S11.13.2_A1_T11.js");
        }

        [Test(Description = "Checking by using eval, check operator is x /= y")]
        public void S11_13_2_A1_T2()
        {
            RunFile("S11.13.2_A1_T2.js");
        }

        [Test(Description = "Checking by using eval, check operator is x %= y")]
        public void S11_13_2_A1_T3()
        {
            RunFile("S11.13.2_A1_T3.js");
        }

        [Test(Description = "Checking by using eval, check operator is x += y")]
        public void S11_13_2_A1_T4()
        {
            RunFile("S11.13.2_A1_T4.js");
        }

        [Test(Description = "Checking by using eval, check operator is x -= y")]
        public void S11_13_2_A1_T5()
        {
            RunFile("S11.13.2_A1_T5.js");
        }

        [Test(Description = "Checking by using eval, check operator is x <<= y")]
        public void S11_13_2_A1_T6()
        {
            RunFile("S11.13.2_A1_T6.js");
        }

        [Test(Description = "Checking by using eval, check operator is x >>= y")]
        public void S11_13_2_A1_T7()
        {
            RunFile("S11.13.2_A1_T7.js");
        }

        [Test(Description = "Checking by using eval, check operator is x >>>= y")]
        public void S11_13_2_A1_T8()
        {
            RunFile("S11.13.2_A1_T8.js");
        }

        [Test(Description = "Checking by using eval, check operator is x &= y")]
        public void S11_13_2_A1_T9()
        {
            RunFile("S11.13.2_A1_T9.js");
        }

        [Test(Description = "Either Type is not Reference or GetBase is not null, check opeartor is \"x *= y\"")]
        public void S11_13_2_A2_1_T1_1()
        {
            RunFile("S11.13.2_A2.1_T1.1.js");
        }

        [Test(Description = "Either Type is not Reference or GetBase is not null, check opeartor is \"x ^= y\"")]
        public void S11_13_2_A2_1_T1_10()
        {
            RunFile("S11.13.2_A2.1_T1.10.js");
        }

        [Test(Description = "Either Type is not Reference or GetBase is not null, check opeartor is \"x |= y\"")]
        public void S11_13_2_A2_1_T1_11()
        {
            RunFile("S11.13.2_A2.1_T1.11.js");
        }

        [Test(Description = "Either Type is not Reference or GetBase is not null, check opeartor is \"x /= y\"")]
        public void S11_13_2_A2_1_T1_2()
        {
            RunFile("S11.13.2_A2.1_T1.2.js");
        }

        [Test(Description = "Either Type is not Reference or GetBase is not null, check opeartor is \"x %= y\"")]
        public void S11_13_2_A2_1_T1_3()
        {
            RunFile("S11.13.2_A2.1_T1.3.js");
        }

        [Test(Description = "Either Type is not Reference or GetBase is not null, check opeartor is \"x += y\"")]
        public void S11_13_2_A2_1_T1_4()
        {
            RunFile("S11.13.2_A2.1_T1.4.js");
        }

        [Test(Description = "Either Type is not Reference or GetBase is not null, check opeartor is \"x -= y\"")]
        public void S11_13_2_A2_1_T1_5()
        {
            RunFile("S11.13.2_A2.1_T1.5.js");
        }

        [Test(Description = "Either Type is not Reference or GetBase is not null, check opeartor is \"x <<= y\"")]
        public void S11_13_2_A2_1_T1_6()
        {
            RunFile("S11.13.2_A2.1_T1.6.js");
        }

        [Test(Description = "Either Type is not Reference or GetBase is not null, check opeartor is \"x >>= y\"")]
        public void S11_13_2_A2_1_T1_7()
        {
            RunFile("S11.13.2_A2.1_T1.7.js");
        }

        [Test(Description = "Either Type is not Reference or GetBase is not null, check opeartor is \"x >>>= y\"")]
        public void S11_13_2_A2_1_T1_8()
        {
            RunFile("S11.13.2_A2.1_T1.8.js");
        }

        [Test(Description = "Either Type is not Reference or GetBase is not null, check opeartor is \"x &= y\"")]
        public void S11_13_2_A2_1_T1_9()
        {
            RunFile("S11.13.2_A2.1_T1.9.js");
        }

        [Test(Description = "If GetBase(AssigmentExpression) is null, throw ReferenceError. Check operator is \"x *= y\"")]
        public void S11_13_2_A2_1_T2_1()
        {
            RunFile("S11.13.2_A2.1_T2.1.js");
        }

        [Test(Description = "If GetBase(AssigmentExpression) is null, throw ReferenceError. Check operator is \"x ^= y\"")]
        public void S11_13_2_A2_1_T2_10()
        {
            RunFile("S11.13.2_A2.1_T2.10.js");
        }

        [Test(Description = "If GetBase(AssigmentExpression) is null, throw ReferenceError. Check operator is \"x |= y\"")]
        public void S11_13_2_A2_1_T2_11()
        {
            RunFile("S11.13.2_A2.1_T2.11.js");
        }

        [Test(Description = "If GetBase(AssigmentExpression) is null, throw ReferenceError. Check operator is \"x /= y\"")]
        public void S11_13_2_A2_1_T2_2()
        {
            RunFile("S11.13.2_A2.1_T2.2.js");
        }

        [Test(Description = "If GetBase(AssigmentExpression) is null, throw ReferenceError. Check operator is \"x %= y\"")]
        public void S11_13_2_A2_1_T2_3()
        {
            RunFile("S11.13.2_A2.1_T2.3.js");
        }

        [Test(Description = "If GetBase(AssigmentExpression) is null, throw ReferenceError. Check operator is \"x += y\"")]
        public void S11_13_2_A2_1_T2_4()
        {
            RunFile("S11.13.2_A2.1_T2.4.js");
        }

        [Test(Description = "If GetBase(AssigmentExpression) is null, throw ReferenceError. Check operator is \"x -= y\"")]
        public void S11_13_2_A2_1_T2_5()
        {
            RunFile("S11.13.2_A2.1_T2.5.js");
        }

        [Test(Description = "If GetBase(AssigmentExpression) is null, throw ReferenceError. Check operator is \"x <<= y\"")]
        public void S11_13_2_A2_1_T2_6()
        {
            RunFile("S11.13.2_A2.1_T2.6.js");
        }

        [Test(Description = "If GetBase(AssigmentExpression) is null, throw ReferenceError. Check operator is \"x >>= y\"")]
        public void S11_13_2_A2_1_T2_7()
        {
            RunFile("S11.13.2_A2.1_T2.7.js");
        }

        [Test(Description = "If GetBase(AssigmentExpression) is null, throw ReferenceError. Check operator is \"x >>>= y\"")]
        public void S11_13_2_A2_1_T2_8()
        {
            RunFile("S11.13.2_A2.1_T2.8.js");
        }

        [Test(Description = "If GetBase(AssigmentExpression) is null, throw ReferenceError. Check operator is \"x &= y\"")]
        public void S11_13_2_A2_1_T2_9()
        {
            RunFile("S11.13.2_A2.1_T2.9.js");
        }

        [Test(Description = "If GetBase(LeftHandSideExpression) is null, throw ReferenceError. Check operator is \"x *= y\"")]
        public void S11_13_2_A2_1_T3_1()
        {
            RunFile("S11.13.2_A2.1_T3.1.js");
        }

        [Test(Description = "If GetBase(LeftHandSideExpression) is null, throw ReferenceError. Check operator is \"x ^= y\"")]
        public void S11_13_2_A2_1_T3_10()
        {
            RunFile("S11.13.2_A2.1_T3.10.js");
        }

        [Test(Description = "If GetBase(LeftHandSideExpression) is null, throw ReferenceError. Check operator is \"x |= y\"")]
        public void S11_13_2_A2_1_T3_11()
        {
            RunFile("S11.13.2_A2.1_T3.11.js");
        }

        [Test(Description = "If GetBase(LeftHandSideExpression) is null, throw ReferenceError. Check operator is \"x /= y\"")]
        public void S11_13_2_A2_1_T3_2()
        {
            RunFile("S11.13.2_A2.1_T3.2.js");
        }

        [Test(Description = "If GetBase(LeftHandSideExpression) is null, throw ReferenceError. Check operator is \"x %= y\"")]
        public void S11_13_2_A2_1_T3_3()
        {
            RunFile("S11.13.2_A2.1_T3.3.js");
        }

        [Test(Description = "If GetBase(LeftHandSideExpression) is null, throw ReferenceError. Check operator is \"x += y\"")]
        public void S11_13_2_A2_1_T3_4()
        {
            RunFile("S11.13.2_A2.1_T3.4.js");
        }

        [Test(Description = "If GetBase(LeftHandSideExpression) is null, throw ReferenceError. Check operator is \"x -= y\"")]
        public void S11_13_2_A2_1_T3_5()
        {
            RunFile("S11.13.2_A2.1_T3.5.js");
        }

        [Test(Description = "If GetBase(LeftHandSideExpression) is null, throw ReferenceError. Check operator is \"x <<= y\"")]
        public void S11_13_2_A2_1_T3_6()
        {
            RunFile("S11.13.2_A2.1_T3.6.js");
        }

        [Test(Description = "If GetBase(LeftHandSideExpression) is null, throw ReferenceError. Check operator is \"x >>= y\"")]
        public void S11_13_2_A2_1_T3_7()
        {
            RunFile("S11.13.2_A2.1_T3.7.js");
        }

        [Test(Description = "If GetBase(LeftHandSideExpression) is null, throw ReferenceError. Check operator is \"x >>>= y\"")]
        public void S11_13_2_A2_1_T3_8()
        {
            RunFile("S11.13.2_A2.1_T3.8.js");
        }

        [Test(Description = "If GetBase(LeftHandSideExpression) is null, throw ReferenceError. Check operator is \"x &= y\"")]
        public void S11_13_2_A2_1_T3_9()
        {
            RunFile("S11.13.2_A2.1_T3.9.js");
        }

        [Test(Description = "If Type(LeftHandSideExpression) is not Reference, throw ReferenceError (or SyntaxError). Check operator is \"x *= y\"")]
        [ExpectedException]
        public void S11_13_2_A2_2_T1()
        {
            RunFile("S11.13.2_A2.2_T1.js");
        }

        [Test(Description = "If Type(LeftHandSideExpression) is not Reference, throw ReferenceError (or SyntaxError). Check operator is \"x ^= y\"")]
        [ExpectedException]
        public void S11_13_2_A2_2_T10()
        {
            RunFile("S11.13.2_A2.2_T10.js");
        }

        [Test(Description = "If Type(LeftHandSideExpression) is not Reference, throw ReferenceError (or SyntaxError). Check operator is \"x |= y\"")]
        [ExpectedException]
        public void S11_13_2_A2_2_T11()
        {
            RunFile("S11.13.2_A2.2_T11.js");
        }

        [Test(Description = "If Type(LeftHandSideExpression) is not Reference, throw ReferenceError (or SyntaxError). Check operator is \"x /= y\"")]
        [ExpectedException]
        public void S11_13_2_A2_2_T2()
        {
            RunFile("S11.13.2_A2.2_T2.js");
        }

        [Test(Description = "If Type(LeftHandSideExpression) is not Reference, throw ReferenceError (or SyntaxError). Check operator is \"x %= y\"")]
        [ExpectedException]
        public void S11_13_2_A2_2_T3()
        {
            RunFile("S11.13.2_A2.2_T3.js");
        }

        [Test(Description = "If Type(LeftHandSideExpression) is not Reference, throw ReferenceError (or SyntaxError). Check operator is \"x += y\"")]
        [ExpectedException]
        public void S11_13_2_A2_2_T4()
        {
            RunFile("S11.13.2_A2.2_T4.js");
        }

        [Test(Description = "If Type(LeftHandSideExpression) is not Reference, throw ReferenceError (or SyntaxError). Check operator is \"x -= y\"")]
        [ExpectedException]
        public void S11_13_2_A2_2_T5()
        {
            RunFile("S11.13.2_A2.2_T5.js");
        }

        [Test(Description = "If Type(LeftHandSideExpression) is not Reference, throw ReferenceError (or SyntaxError). Check operator is \"x <<= y\"")]
        [ExpectedException]
        public void S11_13_2_A2_2_T6()
        {
            RunFile("S11.13.2_A2.2_T6.js");
        }

        [Test(Description = "If Type(LeftHandSideExpression) is not Reference, throw ReferenceError (or SyntaxError). Check operator is \"x >>= y\"")]
        [ExpectedException]
        public void S11_13_2_A2_2_T7()
        {
            RunFile("S11.13.2_A2.2_T7.js");
        }

        [Test(Description = "If Type(LeftHandSideExpression) is not Reference, throw ReferenceError (or SyntaxError). Check operator is \"x >>>= y\"")]
        [ExpectedException]
        public void S11_13_2_A2_2_T8()
        {
            RunFile("S11.13.2_A2.2_T8.js");
        }

        [Test(Description = "If Type(LeftHandSideExpression) is not Reference, throw ReferenceError (or SyntaxError). Check operator is \"x &= y\"")]
        [ExpectedException]
        public void S11_13_2_A2_2_T9()
        {
            RunFile("S11.13.2_A2.2_T9.js");
        }

        [Test(Description = "Checking Expression and Variable statements for x *= y")]
        public void S11_13_2_A3_1_T1()
        {
            RunFile("S11.13.2_A3.1_T1.js");
        }

        [Test(Description = "Checking Expression and Variable statements for x ^= y")]
        public void S11_13_2_A3_1_T10()
        {
            RunFile("S11.13.2_A3.1_T10.js");
        }

        [Test(Description = "Checking Expression and Variable statements for x |= y")]
        public void S11_13_2_A3_1_T11()
        {
            RunFile("S11.13.2_A3.1_T11.js");
        }

        [Test(Description = "Checking Expression and Variable statements for x /= y")]
        public void S11_13_2_A3_1_T2()
        {
            RunFile("S11.13.2_A3.1_T2.js");
        }

        [Test(Description = "Checking Expression and Variable statements for x %= y")]
        public void S11_13_2_A3_1_T3()
        {
            RunFile("S11.13.2_A3.1_T3.js");
        }

        [Test(Description = "Checking Expression and Variable statements for x += y")]
        public void S11_13_2_A3_1_T4()
        {
            RunFile("S11.13.2_A3.1_T4.js");
        }

        [Test(Description = "Checking Expression and Variable statements for x -= y")]
        public void S11_13_2_A3_1_T5()
        {
            RunFile("S11.13.2_A3.1_T5.js");
        }

        [Test(Description = "Checking Expression and Variable statements for x <<= y")]
        public void S11_13_2_A3_1_T6()
        {
            RunFile("S11.13.2_A3.1_T6.js");
        }

        [Test(Description = "Checking Expression and Variable statements for x >>= y")]
        public void S11_13_2_A3_1_T7()
        {
            RunFile("S11.13.2_A3.1_T7.js");
        }

        [Test(Description = "Checking Expression and Variable statements for x >>>= y")]
        public void S11_13_2_A3_1_T8()
        {
            RunFile("S11.13.2_A3.1_T8.js");
        }

        [Test(Description = "Checking Expression and Variable statements for x &= y")]
        public void S11_13_2_A3_1_T9()
        {
            RunFile("S11.13.2_A3.1_T9.js");
        }

        [Test(Description = "Checking Expression and Variable statements for x *= y")]
        public void S11_13_2_A3_2_T1()
        {
            RunFile("S11.13.2_A3.2_T1.js");
        }

        [Test(Description = "Checking Expression and Variable statements for x ^= y")]
        public void S11_13_2_A3_2_T10()
        {
            RunFile("S11.13.2_A3.2_T10.js");
        }

        [Test(Description = "Checking Expression and Variable statements for x |= y")]
        public void S11_13_2_A3_2_T11()
        {
            RunFile("S11.13.2_A3.2_T11.js");
        }

        [Test(Description = "Checking Expression and Variable statements for x /= y")]
        public void S11_13_2_A3_2_T2()
        {
            RunFile("S11.13.2_A3.2_T2.js");
        }

        [Test(Description = "Checking Expression and Variable statements for x %= y")]
        public void S11_13_2_A3_2_T3()
        {
            RunFile("S11.13.2_A3.2_T3.js");
        }

        [Test(Description = "Checking Expression and Variable statements for x += y")]
        public void S11_13_2_A3_2_T4()
        {
            RunFile("S11.13.2_A3.2_T4.js");
        }

        [Test(Description = "Checking Expression and Variable statements for x -= y")]
        public void S11_13_2_A3_2_T5()
        {
            RunFile("S11.13.2_A3.2_T5.js");
        }

        [Test(Description = "Checking Expression and Variable statements for x <<= y")]
        public void S11_13_2_A3_2_T6()
        {
            RunFile("S11.13.2_A3.2_T6.js");
        }

        [Test(Description = "Checking Expression and Variable statements for x >>= y")]
        public void S11_13_2_A3_2_T7()
        {
            RunFile("S11.13.2_A3.2_T7.js");
        }

        [Test(Description = "Checking Expression and Variable statements for x >>>= y")]
        public void S11_13_2_A3_2_T8()
        {
            RunFile("S11.13.2_A3.2_T8.js");
        }

        [Test(Description = "Checking Expression and Variable statements for x &= y")]
        public void S11_13_2_A3_2_T9()
        {
            RunFile("S11.13.2_A3.2_T9.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive boolean and Boolean object")]
        public void S11_13_2_A4_10_T1_1()
        {
            RunFile("S11.13.2_A4.10_T1.1.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive number and Number object")]
        public void S11_13_2_A4_10_T1_2()
        {
            RunFile("S11.13.2_A4.10_T1.2.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive string and String object")]
        public void S11_13_2_A4_10_T1_3()
        {
            RunFile("S11.13.2_A4.10_T1.3.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between Null and Undefined")]
        public void S11_13_2_A4_10_T1_4()
        {
            RunFile("S11.13.2_A4.10_T1.4.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Boolean (primitive and object)")]
        public void S11_13_2_A4_10_T2_1()
        {
            RunFile("S11.13.2_A4.10_T2.1.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and String (primitive and object)")]
        public void S11_13_2_A4_10_T2_2()
        {
            RunFile("S11.13.2_A4.10_T2.2.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Null")]
        public void S11_13_2_A4_10_T2_3()
        {
            RunFile("S11.13.2_A4.10_T2.3.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Undefined")]
        public void S11_13_2_A4_10_T2_4()
        {
            RunFile("S11.13.2_A4.10_T2.4.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Boolean (primitive and object)")]
        public void S11_13_2_A4_10_T2_5()
        {
            RunFile("S11.13.2_A4.10_T2.5.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Undefined")]
        public void S11_13_2_A4_10_T2_6()
        {
            RunFile("S11.13.2_A4.10_T2.6.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Null")]
        public void S11_13_2_A4_10_T2_7()
        {
            RunFile("S11.13.2_A4.10_T2.7.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Boolean (primitive or object) and Undefined")]
        public void S11_13_2_A4_10_T2_8()
        {
            RunFile("S11.13.2_A4.10_T2.8.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Boolean (primitive or object) and Null")]
        public void S11_13_2_A4_10_T2_9()
        {
            RunFile("S11.13.2_A4.10_T2.9.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive boolean and Boolean object")]
        public void S11_13_2_A4_11_T1_1()
        {
            RunFile("S11.13.2_A4.11_T1.1.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive number and Number object")]
        public void S11_13_2_A4_11_T1_2()
        {
            RunFile("S11.13.2_A4.11_T1.2.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive string and String object")]
        public void S11_13_2_A4_11_T1_3()
        {
            RunFile("S11.13.2_A4.11_T1.3.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between Null and Undefined")]
        public void S11_13_2_A4_11_T1_4()
        {
            RunFile("S11.13.2_A4.11_T1.4.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Boolean (primitive and object)")]
        public void S11_13_2_A4_11_T2_1()
        {
            RunFile("S11.13.2_A4.11_T2.1.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and String (primitive and object)")]
        public void S11_13_2_A4_11_T2_2()
        {
            RunFile("S11.13.2_A4.11_T2.2.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Null")]
        public void S11_13_2_A4_11_T2_3()
        {
            RunFile("S11.13.2_A4.11_T2.3.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Undefined")]
        public void S11_13_2_A4_11_T2_4()
        {
            RunFile("S11.13.2_A4.11_T2.4.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Boolean (primitive and object)")]
        public void S11_13_2_A4_11_T2_5()
        {
            RunFile("S11.13.2_A4.11_T2.5.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Undefined")]
        public void S11_13_2_A4_11_T2_6()
        {
            RunFile("S11.13.2_A4.11_T2.6.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Null")]
        public void S11_13_2_A4_11_T2_7()
        {
            RunFile("S11.13.2_A4.11_T2.7.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Boolean (primitive or object) and Undefined")]
        public void S11_13_2_A4_11_T2_8()
        {
            RunFile("S11.13.2_A4.11_T2.8.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Boolean (primitive or object) and Null")]
        public void S11_13_2_A4_11_T2_9()
        {
            RunFile("S11.13.2_A4.11_T2.9.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive boolean and Boolean object")]
        public void S11_13_2_A4_1_T1_1()
        {
            RunFile("S11.13.2_A4.1_T1.1.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive number and Number object")]
        public void S11_13_2_A4_1_T1_2()
        {
            RunFile("S11.13.2_A4.1_T1.2.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive string and String object")]
        public void S11_13_2_A4_1_T1_3()
        {
            RunFile("S11.13.2_A4.1_T1.3.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between Null and Undefined")]
        public void S11_13_2_A4_1_T1_4()
        {
            RunFile("S11.13.2_A4.1_T1.4.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Boolean (primitive or object) and Number (primitive and object)")]
        public void S11_13_2_A4_1_T2_1()
        {
            RunFile("S11.13.2_A4.1_T2.1.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and String (primitive and object)")]
        public void S11_13_2_A4_1_T2_2()
        {
            RunFile("S11.13.2_A4.1_T2.2.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Null")]
        public void S11_13_2_A4_1_T2_3()
        {
            RunFile("S11.13.2_A4.1_T2.3.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Undefined")]
        public void S11_13_2_A4_1_T2_4()
        {
            RunFile("S11.13.2_A4.1_T2.4.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) amd Boolean (primitive and object)")]
        public void S11_13_2_A4_1_T2_5()
        {
            RunFile("S11.13.2_A4.1_T2.5.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between primitive String (primitive or object) and Undefined")]
        public void S11_13_2_A4_1_T2_6()
        {
            RunFile("S11.13.2_A4.1_T2.6.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Null")]
        public void S11_13_2_A4_1_T2_7()
        {
            RunFile("S11.13.2_A4.1_T2.7.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Boolean (primitive or object) and Undefined")]
        public void S11_13_2_A4_1_T2_8()
        {
            RunFile("S11.13.2_A4.1_T2.8.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Boolean (primitive or object) and Null")]
        public void S11_13_2_A4_1_T2_9()
        {
            RunFile("S11.13.2_A4.1_T2.9.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive boolean and Boolean object")]
        public void S11_13_2_A4_2_T1_1()
        {
            RunFile("S11.13.2_A4.2_T1.1.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive number and Number object")]
        public void S11_13_2_A4_2_T1_2()
        {
            RunFile("S11.13.2_A4.2_T1.2.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive string and String object")]
        public void S11_13_2_A4_2_T1_3()
        {
            RunFile("S11.13.2_A4.2_T1.3.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between Null and Undefined")]
        public void S11_13_2_A4_2_T1_4()
        {
            RunFile("S11.13.2_A4.2_T1.4.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Boolean (primitive and object)")]
        public void S11_13_2_A4_2_T2_1()
        {
            RunFile("S11.13.2_A4.2_T2.1.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and String (primitive and object)")]
        public void S11_13_2_A4_2_T2_2()
        {
            RunFile("S11.13.2_A4.2_T2.2.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Null")]
        public void S11_13_2_A4_2_T2_3()
        {
            RunFile("S11.13.2_A4.2_T2.3.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Undefined")]
        public void S11_13_2_A4_2_T2_4()
        {
            RunFile("S11.13.2_A4.2_T2.4.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Boolean (primitive and object)")]
        public void S11_13_2_A4_2_T2_5()
        {
            RunFile("S11.13.2_A4.2_T2.5.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Undefined")]
        public void S11_13_2_A4_2_T2_6()
        {
            RunFile("S11.13.2_A4.2_T2.6.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Null")]
        public void S11_13_2_A4_2_T2_7()
        {
            RunFile("S11.13.2_A4.2_T2.7.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Boolean (primitive or object) and Undefined")]
        public void S11_13_2_A4_2_T2_8()
        {
            RunFile("S11.13.2_A4.2_T2.8.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Boolean (primitive or object) and Null")]
        public void S11_13_2_A4_2_T2_9()
        {
            RunFile("S11.13.2_A4.2_T2.9.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive boolean and Boolean object")]
        public void S11_13_2_A4_3_T1_1()
        {
            RunFile("S11.13.2_A4.3_T1.1.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive number and Number object")]
        public void S11_13_2_A4_3_T1_2()
        {
            RunFile("S11.13.2_A4.3_T1.2.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive string and String object")]
        public void S11_13_2_A4_3_T1_3()
        {
            RunFile("S11.13.2_A4.3_T1.3.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between Null and Undefined")]
        public void S11_13_2_A4_3_T1_4()
        {
            RunFile("S11.13.2_A4.3_T1.4.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Boolean (primitive and object)")]
        public void S11_13_2_A4_3_T2_1()
        {
            RunFile("S11.13.2_A4.3_T2.1.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and String (primitive and object)")]
        public void S11_13_2_A4_3_T2_2()
        {
            RunFile("S11.13.2_A4.3_T2.2.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Null")]
        public void S11_13_2_A4_3_T2_3()
        {
            RunFile("S11.13.2_A4.3_T2.3.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Undefined")]
        public void S11_13_2_A4_3_T2_4()
        {
            RunFile("S11.13.2_A4.3_T2.4.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Boolean (primitive and object)")]
        public void S11_13_2_A4_3_T2_5()
        {
            RunFile("S11.13.2_A4.3_T2.5.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Undefined")]
        public void S11_13_2_A4_3_T2_6()
        {
            RunFile("S11.13.2_A4.3_T2.6.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Null")]
        public void S11_13_2_A4_3_T2_7()
        {
            RunFile("S11.13.2_A4.3_T2.7.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Boolean (primitive or object) and Undefined")]
        public void S11_13_2_A4_3_T2_8()
        {
            RunFile("S11.13.2_A4.3_T2.8.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Boolean (primitive or object) and Null")]
        public void S11_13_2_A4_3_T2_9()
        {
            RunFile("S11.13.2_A4.3_T2.9.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive boolean and Boolean object")]
        public void S11_13_2_A4_4_T1_1()
        {
            RunFile("S11.13.2_A4.4_T1.1.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive number and Number object")]
        public void S11_13_2_A4_4_T1_2()
        {
            RunFile("S11.13.2_A4.4_T1.2.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between Null and Undefined")]
        public void S11_13_2_A4_4_T1_3()
        {
            RunFile("S11.13.2_A4.4_T1.3.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive string and String object")]
        public void S11_13_2_A4_4_T1_4()
        {
            RunFile("S11.13.2_A4.4_T1.4.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Boolean (primitive and object)")]
        public void S11_13_2_A4_4_T2_1()
        {
            RunFile("S11.13.2_A4.4_T2.1.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Null")]
        public void S11_13_2_A4_4_T2_2()
        {
            RunFile("S11.13.2_A4.4_T2.2.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Undefined")]
        public void S11_13_2_A4_4_T2_3()
        {
            RunFile("S11.13.2_A4.4_T2.3.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Boolean (primitive or object) and Undefined")]
        public void S11_13_2_A4_4_T2_4()
        {
            RunFile("S11.13.2_A4.4_T2.4.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Boolean (primitive or object) and Null")]
        public void S11_13_2_A4_4_T2_5()
        {
            RunFile("S11.13.2_A4.4_T2.5.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and String (primitive and object)")]
        public void S11_13_2_A4_4_T2_6()
        {
            RunFile("S11.13.2_A4.4_T2.6.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Boolean (primitive and object)")]
        public void S11_13_2_A4_4_T2_7()
        {
            RunFile("S11.13.2_A4.4_T2.7.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Undefined")]
        public void S11_13_2_A4_4_T2_8()
        {
            RunFile("S11.13.2_A4.4_T2.8.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Null")]
        public void S11_13_2_A4_4_T2_9()
        {
            RunFile("S11.13.2_A4.4_T2.9.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive boolean and Boolean object")]
        public void S11_13_2_A4_5_T1_1()
        {
            RunFile("S11.13.2_A4.5_T1.1.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive number and Number object")]
        public void S11_13_2_A4_5_T1_2()
        {
            RunFile("S11.13.2_A4.5_T1.2.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive string and String object")]
        public void S11_13_2_A4_5_T1_3()
        {
            RunFile("S11.13.2_A4.5_T1.3.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between Null and Undefined")]
        public void S11_13_2_A4_5_T1_4()
        {
            RunFile("S11.13.2_A4.5_T1.4.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Boolean (primitive and object)")]
        public void S11_13_2_A4_5_T2_1()
        {
            RunFile("S11.13.2_A4.5_T2.1.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and String (primitive and object)")]
        public void S11_13_2_A4_5_T2_2()
        {
            RunFile("S11.13.2_A4.5_T2.2.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Null")]
        public void S11_13_2_A4_5_T2_3()
        {
            RunFile("S11.13.2_A4.5_T2.3.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Undefined")]
        public void S11_13_2_A4_5_T2_4()
        {
            RunFile("S11.13.2_A4.5_T2.4.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Boolean (primitive and object)")]
        public void S11_13_2_A4_5_T2_5()
        {
            RunFile("S11.13.2_A4.5_T2.5.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Undefined")]
        public void S11_13_2_A4_5_T2_6()
        {
            RunFile("S11.13.2_A4.5_T2.6.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Null")]
        public void S11_13_2_A4_5_T2_7()
        {
            RunFile("S11.13.2_A4.5_T2.7.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Boolean (primitive or object) and Undefined")]
        public void S11_13_2_A4_5_T2_8()
        {
            RunFile("S11.13.2_A4.5_T2.8.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Boolean (primitive or object) and Null")]
        public void S11_13_2_A4_5_T2_9()
        {
            RunFile("S11.13.2_A4.5_T2.9.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive boolean and Boolean object")]
        public void S11_13_2_A4_6_T1_1()
        {
            RunFile("S11.13.2_A4.6_T1.1.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive number and Number object")]
        public void S11_13_2_A4_6_T1_2()
        {
            RunFile("S11.13.2_A4.6_T1.2.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive string and String object")]
        public void S11_13_2_A4_6_T1_3()
        {
            RunFile("S11.13.2_A4.6_T1.3.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between Null and Undefined")]
        public void S11_13_2_A4_6_T1_4()
        {
            RunFile("S11.13.2_A4.6_T1.4.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Boolean (primitive and object)")]
        public void S11_13_2_A4_6_T2_1()
        {
            RunFile("S11.13.2_A4.6_T2.1.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and String (primitive and object)")]
        public void S11_13_2_A4_6_T2_2()
        {
            RunFile("S11.13.2_A4.6_T2.2.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Null")]
        public void S11_13_2_A4_6_T2_3()
        {
            RunFile("S11.13.2_A4.6_T2.3.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Undefined")]
        public void S11_13_2_A4_6_T2_4()
        {
            RunFile("S11.13.2_A4.6_T2.4.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Boolean (primitive and object)")]
        public void S11_13_2_A4_6_T2_5()
        {
            RunFile("S11.13.2_A4.6_T2.5.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Undefined")]
        public void S11_13_2_A4_6_T2_6()
        {
            RunFile("S11.13.2_A4.6_T2.6.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Null")]
        public void S11_13_2_A4_6_T2_7()
        {
            RunFile("S11.13.2_A4.6_T2.7.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Boolean (primitive or object) and Undefined")]
        public void S11_13_2_A4_6_T2_8()
        {
            RunFile("S11.13.2_A4.6_T2.8.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Boolean (primitive or object) and Null")]
        public void S11_13_2_A4_6_T2_9()
        {
            RunFile("S11.13.2_A4.6_T2.9.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive boolean and Boolean object")]
        public void S11_13_2_A4_7_T1_1()
        {
            RunFile("S11.13.2_A4.7_T1.1.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive number and Number object")]
        public void S11_13_2_A4_7_T1_2()
        {
            RunFile("S11.13.2_A4.7_T1.2.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive string and String object")]
        public void S11_13_2_A4_7_T1_3()
        {
            RunFile("S11.13.2_A4.7_T1.3.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between Null and Undefined")]
        public void S11_13_2_A4_7_T1_4()
        {
            RunFile("S11.13.2_A4.7_T1.4.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Boolean (primitive and object)")]
        public void S11_13_2_A4_7_T2_1()
        {
            RunFile("S11.13.2_A4.7_T2.1.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and String (primitive and object)")]
        public void S11_13_2_A4_7_T2_2()
        {
            RunFile("S11.13.2_A4.7_T2.2.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Null")]
        public void S11_13_2_A4_7_T2_3()
        {
            RunFile("S11.13.2_A4.7_T2.3.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Undefined")]
        public void S11_13_2_A4_7_T2_4()
        {
            RunFile("S11.13.2_A4.7_T2.4.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Boolean (primitive and object)")]
        public void S11_13_2_A4_7_T2_5()
        {
            RunFile("S11.13.2_A4.7_T2.5.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Undefined")]
        public void S11_13_2_A4_7_T2_6()
        {
            RunFile("S11.13.2_A4.7_T2.6.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Null")]
        public void S11_13_2_A4_7_T2_7()
        {
            RunFile("S11.13.2_A4.7_T2.7.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Boolean (primitive or object) and Undefined")]
        public void S11_13_2_A4_7_T2_8()
        {
            RunFile("S11.13.2_A4.7_T2.8.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Boolean (primitive or object) and Null")]
        public void S11_13_2_A4_7_T2_9()
        {
            RunFile("S11.13.2_A4.7_T2.9.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive boolean and Boolean object")]
        public void S11_13_2_A4_8_T1_1()
        {
            RunFile("S11.13.2_A4.8_T1.1.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive number and Number object")]
        public void S11_13_2_A4_8_T1_2()
        {
            RunFile("S11.13.2_A4.8_T1.2.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive string and String object")]
        public void S11_13_2_A4_8_T1_3()
        {
            RunFile("S11.13.2_A4.8_T1.3.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between Null and Undefined")]
        public void S11_13_2_A4_8_T1_4()
        {
            RunFile("S11.13.2_A4.8_T1.4.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Boolean (primitive and object)")]
        public void S11_13_2_A4_8_T2_1()
        {
            RunFile("S11.13.2_A4.8_T2.1.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and String (primitive and object)")]
        public void S11_13_2_A4_8_T2_2()
        {
            RunFile("S11.13.2_A4.8_T2.2.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Null")]
        public void S11_13_2_A4_8_T2_3()
        {
            RunFile("S11.13.2_A4.8_T2.3.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Undefined")]
        public void S11_13_2_A4_8_T2_4()
        {
            RunFile("S11.13.2_A4.8_T2.4.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Boolean (primitive and object)")]
        public void S11_13_2_A4_8_T2_5()
        {
            RunFile("S11.13.2_A4.8_T2.5.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Undefined")]
        public void S11_13_2_A4_8_T2_6()
        {
            RunFile("S11.13.2_A4.8_T2.6.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Null")]
        public void S11_13_2_A4_8_T2_7()
        {
            RunFile("S11.13.2_A4.8_T2.7.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Boolean (primitive or object) and Undefined")]
        public void S11_13_2_A4_8_T2_8()
        {
            RunFile("S11.13.2_A4.8_T2.8.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Boolean (primitive or object) and Null")]
        public void S11_13_2_A4_8_T2_9()
        {
            RunFile("S11.13.2_A4.8_T2.9.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive boolean and Boolean object")]
        public void S11_13_2_A4_9_T1_1()
        {
            RunFile("S11.13.2_A4.9_T1.1.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive number and Number object")]
        public void S11_13_2_A4_9_T1_2()
        {
            RunFile("S11.13.2_A4.9_T1.2.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between primitive string and String object")]
        public void S11_13_2_A4_9_T1_3()
        {
            RunFile("S11.13.2_A4.9_T1.3.js");
        }

        [Test(Description = "Type(x) and Type(y) vary between Null and Undefined")]
        public void S11_13_2_A4_9_T1_4()
        {
            RunFile("S11.13.2_A4.9_T1.4.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Boolean (primitive and object)")]
        public void S11_13_2_A4_9_T2_1()
        {
            RunFile("S11.13.2_A4.9_T2.1.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and String (primitive and object)")]
        public void S11_13_2_A4_9_T2_2()
        {
            RunFile("S11.13.2_A4.9_T2.2.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Null")]
        public void S11_13_2_A4_9_T2_3()
        {
            RunFile("S11.13.2_A4.9_T2.3.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Number (primitive or object) and Undefined")]
        public void S11_13_2_A4_9_T2_4()
        {
            RunFile("S11.13.2_A4.9_T2.4.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Boolean (primitive and object)")]
        public void S11_13_2_A4_9_T2_5()
        {
            RunFile("S11.13.2_A4.9_T2.5.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Undefined")]
        public void S11_13_2_A4_9_T2_6()
        {
            RunFile("S11.13.2_A4.9_T2.6.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between String (primitive or object) and Null")]
        public void S11_13_2_A4_9_T2_7()
        {
            RunFile("S11.13.2_A4.9_T2.7.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Boolean (primitive or object) and Undefined")]
        public void S11_13_2_A4_9_T2_8()
        {
            RunFile("S11.13.2_A4.9_T2.8.js");
        }

        [Test(Description = "Type(x) is different from Type(y) and both types vary between Boolean (primitive or object) and Null")]
        public void S11_13_2_A4_9_T2_9()
        {
            RunFile("S11.13.2_A4.9_T2.9.js");
        }
    }
}
