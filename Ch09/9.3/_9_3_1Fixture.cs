//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;

namespace Jint.Test262.Ch09._9_3
{
    [TestFixture]
    public class _9_3_1Fixture : Test262Fixture
    {
        public _9_3_1Fixture()
            : base("ch09\\9.3\\9.3.1")
        {
        }

        [Test(Description = "Number('') convert to Number by explicit transformation")]
        public void S9_3_1_A1()
        {
            RunFile("S9.3.1_A1.js");
        }

        [Test(Description = "Compare Number('.12345') with +('12345')*1e-5")]
        public void S9_3_1_A10()
        {
            RunFile("S9.3.1_A10.js");
        }

        [Test(Description = "Compare Number('.12345e6') with +('12345')*1e1,")]
        public void S9_3_1_A11()
        {
            RunFile("S9.3.1_A11.js");
        }

        [Test(Description = "Compare Number('12345e6') with +('12345')*1e1,")]
        public void S9_3_1_A12()
        {
            RunFile("S9.3.1_A12.js");
        }

        [Test(Description = "Compare '12' with Number(\"1\")*10+Number(\"2\") and analogous")]
        public void S9_3_1_A13()
        {
            RunFile("S9.3.1_A13.js");
        }

        [Test(Description = "Compare Number('+1234567890') with +('1234567890')")]
        public void S9_3_1_A14()
        {
            RunFile("S9.3.1_A14.js");
        }

        [Test(Description = "Compare -Number('1234567890') with ('-1234567890')")]
        public void S9_3_1_A15()
        {
            RunFile("S9.3.1_A15.js");
        }

        [Test(Description = "Compare Number('0x0') and Number('0X0') with 0")]
        public void S9_3_1_A16()
        {
            RunFile("S9.3.1_A16.js");
        }

        [Test(Description = "Compare Number('0x1') and Number('0X1') with 1")]
        public void S9_3_1_A17()
        {
            RunFile("S9.3.1_A17.js");
        }

        [Test(Description = "Compare Number('0x2') and Number('0X2') with 2")]
        public void S9_3_1_A18()
        {
            RunFile("S9.3.1_A18.js");
        }

        [Test(Description = "Compare Number('0x3') and Number('0X3') with 3")]
        public void S9_3_1_A19()
        {
            RunFile("S9.3.1_A19.js");
        }

        [Test(Description = "Strings with various WhiteSpaces convert to Number by explicit transformation")]
        public void S9_3_1_A2()
        {
            RunFile("S9.3.1_A2.js");
        }

        [Test(Description = "Compare Number('0x4') and Number('0X4') with 4")]
        public void S9_3_1_A20()
        {
            RunFile("S9.3.1_A20.js");
        }

        [Test(Description = "Compare Number('0x5') and Number('0X5') with 5")]
        public void S9_3_1_A21()
        {
            RunFile("S9.3.1_A21.js");
        }

        [Test(Description = "Compare Number('0x6') and Number('0X6') with 6")]
        public void S9_3_1_A22()
        {
            RunFile("S9.3.1_A22.js");
        }

        [Test(Description = "Compare Number('0x7') and Number('0X7') with 7")]
        public void S9_3_1_A23()
        {
            RunFile("S9.3.1_A23.js");
        }

        [Test(Description = "Compare Number('0x8') and Number('0X8') with 8")]
        public void S9_3_1_A24()
        {
            RunFile("S9.3.1_A24.js");
        }

        [Test(Description = "Compare Number('0x9') and Number('0X9') with 9")]
        public void S9_3_1_A25()
        {
            RunFile("S9.3.1_A25.js");
        }

        [Test(Description = "Compare Number('0xA'), Number('0XA'), Number('0xa') and Number('0Xa') with 10")]
        public void S9_3_1_A26()
        {
            RunFile("S9.3.1_A26.js");
        }

        [Test(Description = "Compare Number('0xB'), Number('0XB'), Number('0xb') and Number('0Xb') with 11")]
        public void S9_3_1_A27()
        {
            RunFile("S9.3.1_A27.js");
        }

        [Test(Description = "Compare Number('0xC'), Number('0XC'), Number('0xc') and Number('0Xc') with 12")]
        public void S9_3_1_A28()
        {
            RunFile("S9.3.1_A28.js");
        }

        [Test(Description = "Compare Number('0xD'), Number('0XD'), Number('0xd') and Number('0Xd') with 13")]
        public void S9_3_1_A29()
        {
            RunFile("S9.3.1_A29.js");
        }

        [Test(Description = "Compare Number('0xE'), Number('0XE'), Number('0xe') and Number('0Xe') with 14")]
        public void S9_3_1_A30()
        {
            RunFile("S9.3.1_A30.js");
        }

        [Test(Description = "Compare Number('0xF'), Number('0XF'), Number('0xf') and Number('0Xf') with 15")]
        public void S9_3_1_A31()
        {
            RunFile("S9.3.1_A31.js");
        }

        [Test(Description = "Use various long numbers, for example, 1234567890.1234567890")]
        public void S9_3_1_A32()
        {
            RunFile("S9.3.1_A32.js");
        }

        [Test(Description = "static string")]
        public void S9_3_1_A3_T1()
        {
            RunFile("S9.3.1_A3_T1.js");
        }

        [Test(Description = "dynamic string")]
        public void S9_3_1_A3_T2()
        {
            RunFile("S9.3.1_A3_T2.js");
        }

        [Test(Description = "Compare Number('+any_number') with Number('any_number')")]
        public void S9_3_1_A4_T1()
        {
            RunFile("S9.3.1_A4_T1.js");
        }

        [Test(Description = "Compare Number('+' + 'any_number') with Number('any_number')")]
        public void S9_3_1_A4_T2()
        {
            RunFile("S9.3.1_A4_T2.js");
        }

        [Test(Description = "Compare Number('-any_number') with -Number('any_number')")]
        public void S9_3_1_A5_T1()
        {
            RunFile("S9.3.1_A5_T1.js");
        }

        [Test(Description = "Compare Number('-[or +]any_number') with -[or without -]any_number)")]
        public void S9_3_1_A5_T2()
        {
            RunFile("S9.3.1_A5_T2.js");
        }

        [Test(Description = "Compare Number('-' + 'any_number') with -Number('any_number')")]
        public void S9_3_1_A5_T3()
        {
            RunFile("S9.3.1_A5_T3.js");
        }

        [Test(Description = "Compare Number('Infinity') with Number.POSITIVE_INFINITY, 10e10000, 10E10000 and Number(\"10e10000\")")]
        public void S9_3_1_A6_T1()
        {
            RunFile("S9.3.1_A6_T1.js");
        }

        [Test(Description = "Compare Number('Infi'+'nity') with Number.POSITIVE_INFINITY, 10e10000, 10E10000 and Number(\"10e10000\")")]
        public void S9_3_1_A6_T2()
        {
            RunFile("S9.3.1_A6_T2.js");
        }

        [Test(Description = "Compare Number('1234.5678') with Number('1234')+(+('5678')*1e-4)")]
        public void S9_3_1_A7()
        {
            RunFile("S9.3.1_A7.js");
        }

        [Test(Description = "Compare Number('1234e5') and Number('1234.e5') with Number('1234')*1e5")]
        public void S9_3_1_A8()
        {
            RunFile("S9.3.1_A8.js");
        }

        [Test(Description = "Compare Number('1234.5678e9') with (Number('1234')+(Number('5678')*1e-4))*1e9,")]
        public void S9_3_1_A9()
        {
            RunFile("S9.3.1_A9.js");
        }
    }
}
