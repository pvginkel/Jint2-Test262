//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;

namespace Jint.Test262.Ch09
{
    [TestFixture]
    public class _9_3Fixture : Test262Fixture
    {
        public _9_3Fixture()
            : base("ch09\\9.3")
        {
        }

        [Test(Description = "Undefined convert to Number by explicit transformation")]
        public void S9_3_A1_T1()
        {
            RunFile("S9.3_A1_T1.js");
        }

        [Test(Description = "Undefined convert to Number by implicit transformation")]
        public void S9_3_A1_T2()
        {
            RunFile("S9.3_A1_T2.js");
        }

        [Test(Description = "null convert to Number by explicit transformation")]
        public void S9_3_A2_T1()
        {
            RunFile("S9.3_A2_T1.js");
        }

        [Test(Description = "null convert to Number by implicit transformation")]
        public void S9_3_A2_T2()
        {
            RunFile("S9.3_A2_T2.js");
        }

        [Test(Description = "False and true convert to Number by explicit transformation")]
        public void S9_3_A3_T1()
        {
            RunFile("S9.3_A3_T1.js");
        }

        [Test(Description = "False and true convert to Number by implicit transformation")]
        public void S9_3_A3_T2()
        {
            RunFile("S9.3_A3_T2.js");
        }

        [Test(Description = "Some numbers including Number.MAX_VALUE and Number.MIN_VALUE are converted to Number with explicit transformation")]
        public void S9_3_A4_1_T1()
        {
            RunFile("S9.3_A4.1_T1.js");
        }

        [Test(Description = "Some numbers including Number.MAX_VALUE and Number.MIN_VALUE are converted to Number with implicit transformation")]
        public void S9_3_A4_1_T2()
        {
            RunFile("S9.3_A4.1_T2.js");
        }

        [Test(Description = "Number.NaN, +0, -0, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY,")]
        public void S9_3_A4_2_T1()
        {
            RunFile("S9.3_A4.2_T1.js");
        }

        [Test(Description = "Number.NaN, +0, -0, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY,")]
        public void S9_3_A4_2_T2()
        {
            RunFile("S9.3_A4.2_T2.js");
        }

        [Test(Description = "new Number(), new Number(0), new Number(Number.NaN), new Number(null),")]
        public void S9_3_A5_T1()
        {
            RunFile("S9.3_A5_T1.js");
        }

        [Test(Description = "new Number(), new Number(0), new Number(Number.NaN), new Number(null),")]
        public void S9_3_A5_T2()
        {
            RunFile("S9.3_A5_T2.js");
        }
    }
}
