//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;

namespace Jint.Test262.Ch12
{
    [TestFixture]
    public class _12_14Fixture : Test262Fixture
    {
        public _12_14Fixture()
            : base("ch12\\12.14")
        {
        }

        [Test(Description = "catch doesn't change declaration scope - var initializer in catch with same name as catch parameter changes parameter")]
        public void _12_14_1()
        {
            RunFile("12.14-1.js");
        }

        [Test(Description = "catch introduces scope - name lookup finds function parameter")]
        public void _12_14_10()
        {
            RunFile("12.14-10.js");
        }

        [Test(Description = "catch introduces scope - name lookup finds inner variable")]
        public void _12_14_11()
        {
            RunFile("12.14-11.js");
        }

        [Test(Description = "catch introduces scope - name lookup finds property")]
        public void _12_14_12()
        {
            RunFile("12.14-12.js");
        }

        [Test(Description = "catch introduces scope - updates are based on scope")]
        public void _12_14_13()
        {
            RunFile("12.14-13.js");
        }

        [Test(Description = "Exception object is a function, when an exception parameter is called as a function in catch block, global object is passed as the this value")]
        public void _12_14_14()
        {
            RunFile("12.14-14.js");
        }

        [Test(Description = "Exception object is a function which is a property of an object, when an exception parameter is called as a function in catch block, global object is passed as the this value")]
        public void _12_14_15()
        {
            RunFile("12.14-15.js");
        }

        [Test(Description = "Exception object is a function which update in catch block, when an exception parameter is called as a function in catch block, global object is passed as the this value")]
        public void _12_14_16()
        {
            RunFile("12.14-16.js");
        }

        [Test(Description = "catch doesn't change declaration scope - var initializer in catch with same name as catch parameter changes parameter")]
        public void _12_14_2()
        {
            RunFile("12.14-2.js");
        }

        [Test(Description = "catch doesn't change declaration scope - var declaration are visible outside when name different from catch parameter")]
        public void _12_14_3()
        {
            RunFile("12.14-3.js");
        }

        [Test(Description = "catch introduces scope - block-local vars must shadow outer vars")]
        public void _12_14_4()
        {
            RunFile("12.14-4.js");
        }

        [Test(Description = "catch introduces scope - block-local function expression must shadow outer function expression")]
        public void _12_14_6()
        {
            RunFile("12.14-6.js");
        }

        [Test(Description = "catch introduces scope - scope removed when exiting catch block")]
        public void _12_14_7()
        {
            RunFile("12.14-7.js");
        }

        [Test(Description = "catch introduces scope - scope removed when exiting catch block (properties)")]
        public void _12_14_8()
        {
            RunFile("12.14-8.js");
        }

        [Test(Description = "catch introduces scope - name lookup finds outer variable")]
        public void _12_14_9()
        {
            RunFile("12.14-9.js");
        }

        [Test(Description = "Executing TryStatement : try Block Catch. The statements doesn't cause actual exceptions")]
        public void S12_14_A1()
        {
            RunFile("S12.14_A1.js");
        }

        [Test(Description = "Throwing exception while executing iteration statement placed into try Block")]
        public void S12_14_A10_T1()
        {
            RunFile("S12.14_A10_T1.js");
        }

        [Test(Description = "Try statement inside loop, where use continue loop")]
        public void S12_14_A10_T2()
        {
            RunFile("S12.14_A10_T2.js");
        }

        [Test(Description = "Try statement inside loop, where use break")]
        public void S12_14_A10_T3()
        {
            RunFile("S12.14_A10_T3.js");
        }

        [Test(Description = "Try statement inside loop, where combinate using break and continue")]
        public void S12_14_A10_T4()
        {
            RunFile("S12.14_A10_T4.js");
        }

        [Test(Description = "Throw some exceptions from different place of loop body")]
        public void S12_14_A10_T5()
        {
            RunFile("S12.14_A10_T5.js");
        }

        [Test(Description = "Loop inside try Block, where throw exception")]
        public void S12_14_A11_T1()
        {
            RunFile("S12.14_A11_T1.js");
        }

        [Test(Description = "Try statement inside loop, where use continue loop")]
        public void S12_14_A11_T2()
        {
            RunFile("S12.14_A11_T2.js");
        }

        [Test(Description = "Try statement inside loop, where use break")]
        public void S12_14_A11_T3()
        {
            RunFile("S12.14_A11_T3.js");
        }

        [Test(Description = "Try statement inside loop, where combinate using break and continue")]
        public void S12_14_A11_T4()
        {
            RunFile("S12.14_A11_T4.js");
        }

        [Test(Description = "Loop inside try Block, where throw exception")]
        public void S12_14_A12_T1()
        {
            RunFile("S12.14_A12_T1.js");
        }

        [Test(Description = "Try statement inside loop, where use continue loop")]
        public void S12_14_A12_T2()
        {
            RunFile("S12.14_A12_T2.js");
        }

        [Test(Description = "Try statement inside loop, where use break")]
        public void S12_14_A12_T3()
        {
            RunFile("S12.14_A12_T3.js");
        }

        [Test(Description = "Try statement inside loop, where combinate using break and continue")]
        public void S12_14_A12_T4()
        {
            RunFile("S12.14_A12_T4.js");
        }

        [Test(Description = "Using try/catch syntax construction")]
        public void S12_14_A13_T1()
        {
            RunFile("S12.14_A13_T1.js");
        }

        [Test(Description = "Using try/finally syntax construction")]
        public void S12_14_A13_T2()
        {
            RunFile("S12.14_A13_T2.js");
        }

        [Test(Description = "Using try/catch/finally syntax construction")]
        public void S12_14_A13_T3()
        {
            RunFile("S12.14_A13_T3.js");
        }

        [Test(Description = "Using try/catch/finally in With and With in try/catch/finally")]
        public void S12_14_A14()
        {
            RunFile("S12.14_A14.js");
        }

        [Test(Description = "Insert try/catch/finally to switch statement")]
        public void S12_14_A15()
        {
            RunFile("S12.14_A15.js");
        }

        [Test(Description = "Checking if pure \"try\" syntax construction passes")]
        [ExpectedException]
        public void S12_14_A16_T1()
        {
            RunFile("S12.14_A16_T1.js");
        }

        [Test(Description = "Catch: \"catch (Identifier ) Block\"")]
        [ExpectedException]
        public void S12_14_A16_T10()
        {
            RunFile("S12.14_A16_T10.js");
        }

        [Test(Description = "Catch and Finally are placed into the Block of \"try\" (whitle expected outside)")]
        [ExpectedException]
        public void S12_14_A16_T11()
        {
            RunFile("S12.14_A16_T11.js");
        }

        [Test(Description = "Embedded \"try\" statements followed by two \"catch\" statements")]
        [ExpectedException]
        public void S12_14_A16_T12()
        {
            RunFile("S12.14_A16_T12.js");
        }

        [Test(Description = "Catch: \"catch (Identifier ) Block\". Checking if execution of \"22\" passes at the place of Identifier of \"catch\"")]
        [ExpectedException]
        public void S12_14_A16_T13()
        {
            RunFile("S12.14_A16_T13.js");
        }

        [Test(Description = "Checking if passing argument to \"try\" statement fails")]
        [ExpectedException]
        public void S12_14_A16_T14()
        {
            RunFile("S12.14_A16_T14.js");
        }

        [Test(Description = "Finally: \"finally Block\". Checking if passing argument to \"try\" statement fails")]
        [ExpectedException]
        public void S12_14_A16_T15()
        {
            RunFile("S12.14_A16_T15.js");
        }

        [Test(Description = "Checking if execution of \"catch\" with no \"try\" fails")]
        [ExpectedException]
        public void S12_14_A16_T2()
        {
            RunFile("S12.14_A16_T2.js");
        }

        [Test(Description = "Checking if execution of \"finally\" with no \"try\" fails")]
        [ExpectedException]
        public void S12_14_A16_T3()
        {
            RunFile("S12.14_A16_T3.js");
        }

        [Test(Description = "Catch: \"catch (Identifier ) Block\". Checking if execution of \"catch\" that takes no arguments fails")]
        [ExpectedException]
        public void S12_14_A16_T4()
        {
            RunFile("S12.14_A16_T4.js");
        }

        [Test(Description = "Catch: \"catch (Identifier ) Block\". Checking if execution of \"catch\" with no Block fails")]
        [ExpectedException]
        public void S12_14_A16_T5()
        {
            RunFile("S12.14_A16_T5.js");
        }

        [Test(Description = "Block: \"{ StatementList }\". Checking if execution of \"try{ catch{}{}\" fails")]
        [ExpectedException]
        public void S12_14_A16_T6()
        {
            RunFile("S12.14_A16_T6.js");
        }

        [Test(Description = "Block: \"{ StatementList }\". Checking if execution of \"try{} catch(){\" fails")]
        [ExpectedException]
        public void S12_14_A16_T7()
        {
            RunFile("S12.14_A16_T7.js");
        }

        [Test(Description = "Block: \"{ StatementList }\". Catch: \"catch (Identifier ) Block\". Checking if execution of \"try{} catch(){finally{}\" fails")]
        [ExpectedException]
        public void S12_14_A16_T8()
        {
            RunFile("S12.14_A16_T8.js");
        }

        [Test(Description = "Checking if execution of \"catch(){} finally{}\" fails")]
        [ExpectedException]
        public void S12_14_A16_T9()
        {
            RunFile("S12.14_A16_T9.js");
        }

        [Test(Description = "Creating exceptions within constructor")]
        public void S12_14_A17()
        {
            RunFile("S12.14_A17.js");
        }

        [Test(Description = "Catching undefined")]
        public void S12_14_A18_T1()
        {
            RunFile("S12.14_A18_T1.js");
        }

        [Test(Description = "Catching null")]
        public void S12_14_A18_T2()
        {
            RunFile("S12.14_A18_T2.js");
        }

        [Test(Description = "Catching boolean")]
        public void S12_14_A18_T3()
        {
            RunFile("S12.14_A18_T3.js");
        }

        [Test(Description = "Catching string")]
        public void S12_14_A18_T4()
        {
            RunFile("S12.14_A18_T4.js");
        }

        [Test(Description = "Catching Number")]
        public void S12_14_A18_T5()
        {
            RunFile("S12.14_A18_T5.js");
        }

        [Test(Description = "Catching Object")]
        public void S12_14_A18_T6()
        {
            RunFile("S12.14_A18_T6.js");
        }

        [Test(Description = "Catching Array")]
        public void S12_14_A18_T7()
        {
            RunFile("S12.14_A18_T7.js");
        }

        [Test(Description = "Testing try/catch syntax construction")]
        public void S12_14_A19_T1()
        {
            RunFile("S12.14_A19_T1.js");
        }

        [Test(Description = "Testing try/catch/finally syntax construction")]
        public void S12_14_A19_T2()
        {
            RunFile("S12.14_A19_T2.js");
        }

        [Test(Description = "Checking if execution of \"catch\" catches an exception thrown with \"throw\"")]
        public void S12_14_A2()
        {
            RunFile("S12.14_A2.js");
        }

        [Test(Description = "Checking if execution of \"catch\" catches system exceptions")]
        public void S12_14_A3()
        {
            RunFile("S12.14_A3.js");
        }

        [Test(Description = "Checking if deleting an exception fails")]
        public void S12_14_A4()
        {
            RunFile("S12.14_A4.js");
        }

        [Test(Description = "Checking \"catch\" catches the Identifier in appropriate way")]
        public void S12_14_A5()
        {
            RunFile("S12.14_A5.js");
        }

        [Test(Description = "Executing sequence of \"try\" statements, using counters with varying values within")]
        public void S12_14_A6()
        {
            RunFile("S12.14_A6.js");
        }

        [Test(Description = "Checking if the production of nested TryStatement statements evaluates correct")]
        public void S12_14_A7_T1()
        {
            RunFile("S12.14_A7_T1.js");
        }

        [Test(Description = "Checking if the production of nested TryStatement statements evaluates correct")]
        public void S12_14_A7_T2()
        {
            RunFile("S12.14_A7_T2.js");
        }

        [Test(Description = "Checking if the production of nested TryStatement statements evaluates correct")]
        public void S12_14_A7_T3()
        {
            RunFile("S12.14_A7_T3.js");
        }

        [Test(Description = "Throwing exception within an \"if\" statement")]
        public void S12_14_A8()
        {
            RunFile("S12.14_A8.js");
        }

        [Test(Description = "Loop within a \"try\" Block, from where exception is thrown")]
        public void S12_14_A9_T1()
        {
            RunFile("S12.14_A9_T1.js");
        }

        [Test(Description = "\"try\" statement within a loop, the statement contains \"continue\" statement")]
        public void S12_14_A9_T2()
        {
            RunFile("S12.14_A9_T2.js");
        }

        [Test(Description = "\"try\" statement within a loop, the statement contains \"break\" statement")]
        public void S12_14_A9_T3()
        {
            RunFile("S12.14_A9_T3.js");
        }

        [Test(Description = "\"try\" statement within a loop, the statement contains \"continue\" and \"break\" statements")]
        public void S12_14_A9_T4()
        {
            RunFile("S12.14_A9_T4.js");
        }

        [Test(Description = "Checking if exceptions are thrown correctly from wherever of loop body")]
        public void S12_14_A9_T5()
        {
            RunFile("S12.14_A9_T5.js");
        }
    }
}
