//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;

namespace Jint.Test262.Ch12._12_6
{
    [TestFixture]
    public class _12_6_3Fixture : Test262Fixture
    {
        public _12_6_3Fixture()
            : base("ch12\\12.6\\12.6.3")
        {
        }

        [Test(Description = "The for Statement - (normal, V, empty) will be returned when first Expression is an Object with value false")]
        public void _12_6_3_2_3_a_ii_1()
        {
            RunFile("12.6.3_2-3-a-ii-1.js");
        }

        [Test(Description = "The for Statement - (normal, V, empty) will be returned when first Expression is a String object (value is '1')")]
        public void _12_6_3_2_3_a_ii_10()
        {
            RunFile("12.6.3_2-3-a-ii-10.js");
        }

        [Test(Description = "The for Statement - (normal, V, empty) will be returned when first Expression is undefined")]
        public void _12_6_3_2_3_a_ii_11()
        {
            RunFile("12.6.3_2-3-a-ii-11.js");
        }

        [Test(Description = "The for Statement - (normal, V, empty) will be returned when first Expression is null")]
        public void _12_6_3_2_3_a_ii_12()
        {
            RunFile("12.6.3_2-3-a-ii-12.js");
        }

        [Test(Description = "The for Statement - (normal, V, empty) will be returned when first Expression is a boolean (value is false)")]
        public void _12_6_3_2_3_a_ii_13()
        {
            RunFile("12.6.3_2-3-a-ii-13.js");
        }

        [Test(Description = "The for Statement - (normal, V, empty) will be returned when first Expression is a number (value is NaN)")]
        public void _12_6_3_2_3_a_ii_14()
        {
            RunFile("12.6.3_2-3-a-ii-14.js");
        }

        [Test(Description = "The for Statement - (normal, V, empty) will be returned when first Expression is a number (value is +0)")]
        public void _12_6_3_2_3_a_ii_15()
        {
            RunFile("12.6.3_2-3-a-ii-15.js");
        }

        [Test(Description = "The for Statement - (normal, V, empty) will be returned when first Expression is a number (value is -0)")]
        public void _12_6_3_2_3_a_ii_16()
        {
            RunFile("12.6.3_2-3-a-ii-16.js");
        }

        [Test(Description = "The for Statement - (normal, V, empty) will be returned when first Expression is a number (value is a positive)")]
        public void _12_6_3_2_3_a_ii_17()
        {
            RunFile("12.6.3_2-3-a-ii-17.js");
        }

        [Test(Description = "The for Statement - (normal, V, empty) will be returned when first Expression is a string (value is empty string)")]
        public void _12_6_3_2_3_a_ii_18()
        {
            RunFile("12.6.3_2-3-a-ii-18.js");
        }

        [Test(Description = "The for Statement - (normal, V, empty) will be returned when first Expression is a string (value is 'undefined')")]
        public void _12_6_3_2_3_a_ii_19()
        {
            RunFile("12.6.3_2-3-a-ii-19.js");
        }

        [Test(Description = "The for Statement - (normal, V, empty) will be returned when first Expression is a Boolean object")]
        public void _12_6_3_2_3_a_ii_2()
        {
            RunFile("12.6.3_2-3-a-ii-2.js");
        }

        [Test(Description = "The for Statement - (normal, V, empty) will be returned when first Expression is a string (value is 'null')")]
        public void _12_6_3_2_3_a_ii_20()
        {
            RunFile("12.6.3_2-3-a-ii-20.js");
        }

        [Test(Description = "The for Statement - (normal, V, empty) will be returned when first Expression is a string (value is '1')")]
        public void _12_6_3_2_3_a_ii_21()
        {
            RunFile("12.6.3_2-3-a-ii-21.js");
        }

        [Test(Description = "The for Statement - (normal, V, empty) will be returned when first Expression is a Number object (value is NaN)")]
        public void _12_6_3_2_3_a_ii_3()
        {
            RunFile("12.6.3_2-3-a-ii-3.js");
        }

        [Test(Description = "The for Statement - (normal, V, empty) will be returned when first Expression is a Number object (value is +0)")]
        public void _12_6_3_2_3_a_ii_4()
        {
            RunFile("12.6.3_2-3-a-ii-4.js");
        }

        [Test(Description = "The for Statement - (normal, V, empty) will be returned when first Expression is a Number object (value is -0)")]
        public void _12_6_3_2_3_a_ii_5()
        {
            RunFile("12.6.3_2-3-a-ii-5.js");
        }

        [Test(Description = "The for Statement - (normal, V, empty) will be returned when first Expression is a Number object (value is a positive)")]
        public void _12_6_3_2_3_a_ii_6()
        {
            RunFile("12.6.3_2-3-a-ii-6.js");
        }

        [Test(Description = "The for Statement - (normal, V, empty) will be returned when first Expression is a String object (value is empty string)")]
        public void _12_6_3_2_3_a_ii_7()
        {
            RunFile("12.6.3_2-3-a-ii-7.js");
        }

        [Test(Description = "The for Statement - (normal, V, empty) will be returned when first Expression is a String object (value is 'undefined')")]
        public void _12_6_3_2_3_a_ii_8()
        {
            RunFile("12.6.3_2-3-a-ii-8.js");
        }

        [Test(Description = "The for Statement - (normal, V, empty) will be returned when first Expression is a String object (value is 'null')")]
        public void _12_6_3_2_3_a_ii_9()
        {
            RunFile("12.6.3_2-3-a-ii-9.js");
        }

        [Test(Description = "Breaking an infinite loop by throwing exception")]
        public void S12_6_3_A1()
        {
            RunFile("S12.6.3_A1.js");
        }

        [Test(Description = "Checking if executing nested \"var-loops\" nine blocks depth is evaluated properly")]
        public void S12_6_3_A10_1()
        {
            RunFile("S12.6.3_A10.1.js");
        }

        [Test(Description = "Checking if executing nested \"var-loops\" nine blocks depth is evaluated properly")]
        public void S12_6_3_A10()
        {
            RunFile("S12.6.3_A10.js");
        }

        [Test(Description = "Using \"continue\" in order to continue a loop")]
        public void S12_6_3_A11_1_T1()
        {
            RunFile("S12.6.3_A11.1_T1.js");
        }

        [Test(Description = "Embedded loops")]
        public void S12_6_3_A11_1_T2()
        {
            RunFile("S12.6.3_A11.1_T2.js");
        }

        [Test(Description = "Trying to continue non-existent label")]
        [ExpectedException]
        public void S12_6_3_A11_1_T3()
        {
            RunFile("S12.6.3_A11.1_T3.js");
        }

        [Test(Description = "Simple test of continue loop with using \"continue\"")]
        public void S12_6_3_A11_T1()
        {
            RunFile("S12.6.3_A11_T1.js");
        }

        [Test(Description = "Embedded loops")]
        public void S12_6_3_A11_T2()
        {
            RunFile("S12.6.3_A11_T2.js");
        }

        [Test(Description = "Trying to continue non-existent label")]
        [ExpectedException]
        public void S12_6_3_A11_T3()
        {
            RunFile("S12.6.3_A11_T3.js");
        }

        [Test(Description = "Breaking a loop with \"break\"")]
        public void S12_6_3_A12_1_T1()
        {
            RunFile("S12.6.3_A12.1_T1.js");
        }

        [Test(Description = "Embedded loops")]
        public void S12_6_3_A12_1_T2()
        {
            RunFile("S12.6.3_A12.1_T2.js");
        }

        [Test(Description = "Trying to break non-existent label")]
        [ExpectedException]
        public void S12_6_3_A12_1_T3()
        {
            RunFile("S12.6.3_A12.1_T3.js");
        }

        [Test(Description = "Breaking a loop with \"break\"")]
        public void S12_6_3_A12_T1()
        {
            RunFile("S12.6.3_A12_T1.js");
        }

        [Test(Description = "Embedded loops")]
        public void S12_6_3_A12_T2()
        {
            RunFile("S12.6.3_A12_T2.js");
        }

        [Test(Description = "Trying to break non-existent label")]
        [ExpectedException]
        public void S12_6_3_A12_T3()
        {
            RunFile("S12.6.3_A12_T3.js");
        }

        [Test(Description = "Declaring variable in \"for\" ExpressionNoIn")]
        public void S12_6_3_A13()
        {
            RunFile("S12.6.3_A13.js");
        }

        [Test(Description = "Using +,*,/, as the second Expression")]
        public void S12_6_3_A14()
        {
            RunFile("S12.6.3_A14.js");
        }

        [Test(Description = "Statement must be evaluated before second Expression is evaluated")]
        public void S12_6_3_A15()
        {
            RunFile("S12.6.3_A15.js");
        }

        [Test(Description = "Using \"(function(){throw \"NoInExpression\"})()\" as ExpressionNoIn")]
        public void S12_6_3_A2_1()
        {
            RunFile("S12.6.3_A2.1.js");
        }

        [Test(Description = "Using \"(function(){throw \"NoInExpression\"})()\" as ExpressionNoIn")]
        public void S12_6_3_A2_2()
        {
            RunFile("S12.6.3_A2.2.js");
        }

        [Test(Description = "Using \"(function(){throw \"NoInExpression\"})()\" as ExpressionNoIn")]
        public void S12_6_3_A2()
        {
            RunFile("S12.6.3_A2.js");
        }

        [Test(Description = "Using \"(function(){throw \"FirstExpression\"})()\" as FirstExpression")]
        public void S12_6_3_A3()
        {
            RunFile("S12.6.3_A3.js");
        }

        [Test(Description = "Checking if execution of \"for (var a in arr;1;){}\" fails")]
        [ExpectedException]
        public void S12_6_3_A4_1()
        {
            RunFile("S12.6.3_A4.1.js");
        }

        [Test(Description = "Checking if execution of \"for (a in arr;1;){}\" fails")]
        [ExpectedException]
        public void S12_6_3_A4_T1()
        {
            RunFile("S12.6.3_A4_T1.js");
        }

        [Test(Description = "Checking if execution of \"for (1 in arr;1;){}\" fails")]
        [ExpectedException]
        public void S12_6_3_A4_T2()
        {
            RunFile("S12.6.3_A4_T2.js");
        }

        [Test(Description = "Using eval \"for(eval(\"i in arr\");1;)\"")]
        public void S12_6_3_A5()
        {
            RunFile("S12.6.3_A5.js");
        }

        [Test(Description = "Using \"(function(){throw \"SecondExpression\";})()\" as an Expression")]
        public void S12_6_3_A6()
        {
            RunFile("S12.6.3_A6.js");
        }

        [Test(Description = "Checking if execution of \"for(var index=0; index<10; index++; index--)\" fails")]
        [ExpectedException]
        public void S12_6_3_A7_1_T1()
        {
            RunFile("S12.6.3_A7.1_T1.js");
        }

        [Test(Description = "Checking if execution of \"for(var index=0; index<10; index+=4; index++; index--)\" fails")]
        [ExpectedException]
        public void S12_6_3_A7_1_T2()
        {
            RunFile("S12.6.3_A7.1_T2.js");
        }

        [Test(Description = "Checking if execution of \"for(index=0; index<10; index++; index--)\" fails")]
        [ExpectedException]
        public void S12_6_3_A7_T1()
        {
            RunFile("S12.6.3_A7_T1.js");
        }

        [Test(Description = "Checking if execution of \"for(index=0; index<10; index+=4; index++; index--)\" fails")]
        [ExpectedException]
        public void S12_6_3_A7_T2()
        {
            RunFile("S12.6.3_A7_T2.js");
        }

        [Test(Description = "Checking if execution of \"for(var index=0; index<100; {index++; index*2;}) {  arr.add(\"\"+index);}\" fails")]
        [ExpectedException]
        public void S12_6_3_A8_1_T1()
        {
            RunFile("S12.6.3_A8.1_T1.js");
        }

        [Test(Description = "Checking if execution of \"for(var index=0; {index++;index<100;}; index*2;) {  arr.add(\"\"+index);}\" fails")]
        [ExpectedException]
        public void S12_6_3_A8_1_T2()
        {
            RunFile("S12.6.3_A8.1_T2.js");
        }

        [Test(Description = "Checking if execution of \"for({var index=0; index+=1;} index++<=10; index*2;) { arr.add(\"\"+index);}\" fails")]
        [ExpectedException]
        public void S12_6_3_A8_1_T3()
        {
            RunFile("S12.6.3_A8.1_T3.js");
        }

        [Test(Description = "Checking if execution of \"for(index=0; index<100; {index++; index*2;}) {  arr.add(\"\"+index);}\" fails")]
        [ExpectedException]
        public void S12_6_3_A8_T1()
        {
            RunFile("S12.6.3_A8_T1.js");
        }

        [Test(Description = "Checking if execution of \"for(index=0; {index++;index<100;}; index*2;) {  arr.add(\"\"+index);}\" fails")]
        [ExpectedException]
        public void S12_6_3_A8_T2()
        {
            RunFile("S12.6.3_A8_T2.js");
        }

        [Test(Description = "Checking if execution of \"for({index=0; index+=1;} index++<=10; index*2;) { arr.add(\"\"+index);}\" fails")]
        [ExpectedException]
        public void S12_6_3_A8_T3()
        {
            RunFile("S12.6.3_A8_T3.js");
        }

        [Test(Description = "Using eval")]
        public void S12_6_3_A9_1()
        {
            RunFile("S12.6.3_A9.1.js");
        }

        [Test(Description = "Using eval")]
        public void S12_6_3_A9()
        {
            RunFile("S12.6.3_A9.js");
        }
    }
}
