//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;

namespace Jint.Test262.Ch07._7_6
{
    [TestFixture]
    public class _7_6_1Fixture : Test262Fixture
    {
        public _7_6_1Fixture()
            : base("ch07\\7.6\\7.6.1")
        {
        }

        [Test(Description = "Allow reserved words as property names at object initialization, verified with hasOwnProperty: null, true, false")]
        public void _7_6_1_1_1()
        {
            RunFile("7.6.1-1-1.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, verified with hasOwnProperty: in, try, class")]
        public void _7_6_1_1_10()
        {
            RunFile("7.6.1-1-10.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, verified with hasOwnProperty: enum, extends, super")]
        public void _7_6_1_1_11()
        {
            RunFile("7.6.1-1-11.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, verified with hasOwnProperty: const, export, import")]
        public void _7_6_1_1_12()
        {
            RunFile("7.6.1-1-12.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, verified with hasOwnProperty: implements, let, private")]
        public void _7_6_1_1_13()
        {
            RunFile("7.6.1-1-13.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, verified with hasOwnProperty: public, yield, interface")]
        public void _7_6_1_1_14()
        {
            RunFile("7.6.1-1-14.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, verified with hasOwnProperty: package, protected, static")]
        public void _7_6_1_1_15()
        {
            RunFile("7.6.1-1-15.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, verified with hasOwnProperty: undeefined, NaN, Infinity")]
        public void _7_6_1_1_16()
        {
            RunFile("7.6.1-1-16.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, verified with hasOwnProperty: break, case, do")]
        public void _7_6_1_1_2()
        {
            RunFile("7.6.1-1-2.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, verified with hasOwnProperty: instanceof, typeof, else")]
        public void _7_6_1_1_3()
        {
            RunFile("7.6.1-1-3.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, verified with hasOwnProperty: new, var, catch")]
        public void _7_6_1_1_4()
        {
            RunFile("7.6.1-1-4.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, verified with hasOwnProperty: finally, return, void")]
        public void _7_6_1_1_5()
        {
            RunFile("7.6.1-1-5.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, verified with hasOwnProperty: continue, for, switch")]
        public void _7_6_1_1_6()
        {
            RunFile("7.6.1-1-6.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, verified with hasOwnProperty: while, debugger, function")]
        public void _7_6_1_1_7()
        {
            RunFile("7.6.1-1-7.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, verified with hasOwnProperty: this, with, default")]
        public void _7_6_1_1_8()
        {
            RunFile("7.6.1-1-8.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, verified with hasOwnProperty: if, throw, delete")]
        public void _7_6_1_1_9()
        {
            RunFile("7.6.1-1-9.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, verified with hasOwnProperty: null, true, false")]
        public void _7_6_1_2_1()
        {
            RunFile("7.6.1-2-1.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, verified with hasOwnProperty: in, try, class")]
        public void _7_6_1_2_10()
        {
            RunFile("7.6.1-2-10.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, verified with hasOwnProperty: enum, extends, super")]
        public void _7_6_1_2_11()
        {
            RunFile("7.6.1-2-11.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, verified with hasOwnProperty: const, export, import")]
        public void _7_6_1_2_12()
        {
            RunFile("7.6.1-2-12.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, verified with hasOwnProperty: implements, let, private")]
        public void _7_6_1_2_13()
        {
            RunFile("7.6.1-2-13.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, verified with hasOwnProperty: public, yield, interface")]
        public void _7_6_1_2_14()
        {
            RunFile("7.6.1-2-14.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, verified with hasOwnProperty: package, protected, static")]
        public void _7_6_1_2_15()
        {
            RunFile("7.6.1-2-15.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, verified with hasOwnProperty: undefined, NaN, Infinity")]
        public void _7_6_1_2_16()
        {
            RunFile("7.6.1-2-16.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, verified with hasOwnProperty: break, case, do")]
        public void _7_6_1_2_2()
        {
            RunFile("7.6.1-2-2.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, verified with hasOwnProperty: instanceof, typeof, else")]
        public void _7_6_1_2_3()
        {
            RunFile("7.6.1-2-3.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, verified with hasOwnProperty: new, var, catch")]
        public void _7_6_1_2_4()
        {
            RunFile("7.6.1-2-4.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, verified with hasOwnProperty: finally, return, void")]
        public void _7_6_1_2_5()
        {
            RunFile("7.6.1-2-5.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, verified with hasOwnProperty: continue, for, switch")]
        public void _7_6_1_2_6()
        {
            RunFile("7.6.1-2-6.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, verified with hasOwnProperty: while, debugger, function")]
        public void _7_6_1_2_7()
        {
            RunFile("7.6.1-2-7.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, verified with hasOwnProperty: this, with, default")]
        public void _7_6_1_2_8()
        {
            RunFile("7.6.1-2-8.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, verified with hasOwnProperty: if, throw, delete")]
        public void _7_6_1_2_9()
        {
            RunFile("7.6.1-2-9.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment,verified with hasOwnProperty: null, true, false")]
        public void _7_6_1_3_1()
        {
            RunFile("7.6.1-3-1.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment,verified with hasOwnProperty: in, try, class")]
        public void _7_6_1_3_10()
        {
            RunFile("7.6.1-3-10.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment,verified with hasOwnProperty: enum, extends, super")]
        public void _7_6_1_3_11()
        {
            RunFile("7.6.1-3-11.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment,verified with hasOwnProperty: const, export, import")]
        public void _7_6_1_3_12()
        {
            RunFile("7.6.1-3-12.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment,verified with hasOwnProperty: implements, let, private")]
        public void _7_6_1_3_13()
        {
            RunFile("7.6.1-3-13.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment,verified with hasOwnProperty: public, yield, interface")]
        public void _7_6_1_3_14()
        {
            RunFile("7.6.1-3-14.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment,verified with hasOwnProperty: package, protected, static")]
        public void _7_6_1_3_15()
        {
            RunFile("7.6.1-3-15.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment,verified with hasOwnProperty: undefined, NaN, Infinity")]
        public void _7_6_1_3_16()
        {
            RunFile("7.6.1-3-16.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment,verified with hasOwnProperty: break, case, do")]
        public void _7_6_1_3_2()
        {
            RunFile("7.6.1-3-2.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment,verified with hasOwnProperty: instanceof, typeof, else")]
        public void _7_6_1_3_3()
        {
            RunFile("7.6.1-3-3.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment,verified with hasOwnProperty: new, var, catch")]
        public void _7_6_1_3_4()
        {
            RunFile("7.6.1-3-4.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment,verified with hasOwnProperty: finally, return, void")]
        public void _7_6_1_3_5()
        {
            RunFile("7.6.1-3-5.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment,verified with hasOwnProperty: continue, for, switch")]
        public void _7_6_1_3_6()
        {
            RunFile("7.6.1-3-6.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment,verified with hasOwnProperty: while, debugger, function")]
        public void _7_6_1_3_7()
        {
            RunFile("7.6.1-3-7.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment,verified with hasOwnProperty: this, with, default")]
        public void _7_6_1_3_8()
        {
            RunFile("7.6.1-3-8.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment,verified with hasOwnProperty: if, throw, delete")]
        public void _7_6_1_3_9()
        {
            RunFile("7.6.1-3-9.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, verified with hasOwnProperty: null, true, false")]
        public void _7_6_1_4_1()
        {
            RunFile("7.6.1-4-1.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, verified with hasOwnProperty: in, try, class")]
        public void _7_6_1_4_10()
        {
            RunFile("7.6.1-4-10.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, verified with hasOwnProperty: enum, extends, super")]
        public void _7_6_1_4_11()
        {
            RunFile("7.6.1-4-11.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, verified with hasOwnProperty: const, export, import")]
        public void _7_6_1_4_12()
        {
            RunFile("7.6.1-4-12.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, verified with hasOwnProperty: implements, let, private")]
        public void _7_6_1_4_13()
        {
            RunFile("7.6.1-4-13.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, verified with hasOwnProperty: public, yield, interface")]
        public void _7_6_1_4_14()
        {
            RunFile("7.6.1-4-14.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, verified with hasOwnProperty: package, protected, static")]
        public void _7_6_1_4_15()
        {
            RunFile("7.6.1-4-15.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, verified with hasOwnProperty: undefined, NaN, Infinity")]
        public void _7_6_1_4_16()
        {
            RunFile("7.6.1-4-16.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, verified with hasOwnProperty: break, case, do")]
        public void _7_6_1_4_2()
        {
            RunFile("7.6.1-4-2.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, verified with hasOwnProperty: instanceof, typeof, else")]
        public void _7_6_1_4_3()
        {
            RunFile("7.6.1-4-3.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, verified with hasOwnProperty: new, var, catch")]
        public void _7_6_1_4_4()
        {
            RunFile("7.6.1-4-4.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, verified with hasOwnProperty: finally, return, void")]
        public void _7_6_1_4_5()
        {
            RunFile("7.6.1-4-5.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, verified with hasOwnProperty: continue, for, switch")]
        public void _7_6_1_4_6()
        {
            RunFile("7.6.1-4-6.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, verified with hasOwnProperty: while, debugger, function")]
        public void _7_6_1_4_7()
        {
            RunFile("7.6.1-4-7.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, verified with hasOwnProperty: this, with, default")]
        public void _7_6_1_4_8()
        {
            RunFile("7.6.1-4-8.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, verified with hasOwnProperty: if, throw, delete")]
        public void _7_6_1_4_9()
        {
            RunFile("7.6.1-4-9.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, accessed via indexing: null, true, false")]
        public void _7_6_1_5_1()
        {
            RunFile("7.6.1-5-1.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, accessed via indexing: in, try, class")]
        public void _7_6_1_5_10()
        {
            RunFile("7.6.1-5-10.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, accessed via indexing: enum, extends, super")]
        public void _7_6_1_5_11()
        {
            RunFile("7.6.1-5-11.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, accessed via indexing: const, export, import")]
        public void _7_6_1_5_12()
        {
            RunFile("7.6.1-5-12.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, accessed via indexing: implements, let, private")]
        public void _7_6_1_5_13()
        {
            RunFile("7.6.1-5-13.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, accessed via indexing: public, yield, interface")]
        public void _7_6_1_5_14()
        {
            RunFile("7.6.1-5-14.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, accessed via indexing: package, protected, static")]
        public void _7_6_1_5_15()
        {
            RunFile("7.6.1-5-15.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, accessed via indexing: undefined, NaN, Infinity")]
        public void _7_6_1_5_16()
        {
            RunFile("7.6.1-5-16.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, accessed via indexing: break, case, do")]
        public void _7_6_1_5_2()
        {
            RunFile("7.6.1-5-2.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, accessed via indexing: instanceof, typeof, else")]
        public void _7_6_1_5_3()
        {
            RunFile("7.6.1-5-3.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, accessed via indexing: new, var, catch")]
        public void _7_6_1_5_4()
        {
            RunFile("7.6.1-5-4.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, accessed via indexing: finally, return, void")]
        public void _7_6_1_5_5()
        {
            RunFile("7.6.1-5-5.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, accessed via indexing: continue, for, switch")]
        public void _7_6_1_5_6()
        {
            RunFile("7.6.1-5-6.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, accessed via indexing: while, debugger, function")]
        public void _7_6_1_5_7()
        {
            RunFile("7.6.1-5-7.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, accessed via indexing: this, with, default")]
        public void _7_6_1_5_8()
        {
            RunFile("7.6.1-5-8.js");
        }

        [Test(Description = "Allow reserved words as property names at object initialization, accessed via indexing: if, throw, delete")]
        public void _7_6_1_5_9()
        {
            RunFile("7.6.1-5-9.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, accessed via indexing: null, true, false")]
        public void _7_6_1_6_1()
        {
            RunFile("7.6.1-6-1.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, accessed via indexing: in, try, class")]
        public void _7_6_1_6_10()
        {
            RunFile("7.6.1-6-10.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, accessed via indexing: enum, extends, super")]
        public void _7_6_1_6_11()
        {
            RunFile("7.6.1-6-11.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, accessed via indexing: const, export, import")]
        public void _7_6_1_6_12()
        {
            RunFile("7.6.1-6-12.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, accessed via indexing: implements, let, private")]
        public void _7_6_1_6_13()
        {
            RunFile("7.6.1-6-13.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, accessed via indexing: public, yield, interface")]
        public void _7_6_1_6_14()
        {
            RunFile("7.6.1-6-14.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, accessed via indexing: package, protected, static")]
        public void _7_6_1_6_15()
        {
            RunFile("7.6.1-6-15.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, accessed via indexing: undefined, NaN, Infinity")]
        public void _7_6_1_6_16()
        {
            RunFile("7.6.1-6-16.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, accessed via indexing: break, case, do")]
        public void _7_6_1_6_2()
        {
            RunFile("7.6.1-6-2.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, accessed via indexing: instanceof, typeof, else")]
        public void _7_6_1_6_3()
        {
            RunFile("7.6.1-6-3.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, accessed via indexing: new, var, catch")]
        public void _7_6_1_6_4()
        {
            RunFile("7.6.1-6-4.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, accessed via indexing: finally, return, void")]
        public void _7_6_1_6_5()
        {
            RunFile("7.6.1-6-5.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, accessed via indexing: continue, for, switch")]
        public void _7_6_1_6_6()
        {
            RunFile("7.6.1-6-6.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, accessed via indexing: while, debugger, function")]
        public void _7_6_1_6_7()
        {
            RunFile("7.6.1-6-7.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, accessed via indexing: this, with, default")]
        public void _7_6_1_6_8()
        {
            RunFile("7.6.1-6-8.js");
        }

        [Test(Description = "Allow reserved words as property names by dot operator assignment, accessed via indexing: if, throw, delete")]
        public void _7_6_1_6_9()
        {
            RunFile("7.6.1-6-9.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment, accessed via indexing: null, true, false")]
        public void _7_6_1_7_1()
        {
            RunFile("7.6.1-7-1.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment, accessed via indexing: in, try, class")]
        public void _7_6_1_7_10()
        {
            RunFile("7.6.1-7-10.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment, accessed via indexing: enum, extends, super")]
        public void _7_6_1_7_11()
        {
            RunFile("7.6.1-7-11.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment, accessed via indexing: const, export, import")]
        public void _7_6_1_7_12()
        {
            RunFile("7.6.1-7-12.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment, accessed via indexing: implements, let, private")]
        public void _7_6_1_7_13()
        {
            RunFile("7.6.1-7-13.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment, accessed via indexing: public, yield, interface")]
        public void _7_6_1_7_14()
        {
            RunFile("7.6.1-7-14.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment, accessed via indexing: package, protected, static")]
        public void _7_6_1_7_15()
        {
            RunFile("7.6.1-7-15.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment, accessed via indexing: undefined, NaN, Infinity")]
        public void _7_6_1_7_16()
        {
            RunFile("7.6.1-7-16.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment, accessed via indexing: break, case, do")]
        public void _7_6_1_7_2()
        {
            RunFile("7.6.1-7-2.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment, accessed via indexing: instanceof, typeof, else")]
        public void _7_6_1_7_3()
        {
            RunFile("7.6.1-7-3.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment, accessed via indexing: new, var, catch")]
        public void _7_6_1_7_4()
        {
            RunFile("7.6.1-7-4.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment, accessed via indexing: finally, return, void")]
        public void _7_6_1_7_5()
        {
            RunFile("7.6.1-7-5.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment, accessed via indexing: continue, for, switch")]
        public void _7_6_1_7_6()
        {
            RunFile("7.6.1-7-6.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment, accessed via indexing: while, debugger, function")]
        public void _7_6_1_7_7()
        {
            RunFile("7.6.1-7-7.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment, accessed via indexing: this, with, default")]
        public void _7_6_1_7_8()
        {
            RunFile("7.6.1-7-8.js");
        }

        [Test(Description = "Allow reserved words as property names by index assignment, accessed via indexing: if, throw, delete")]
        public void _7_6_1_7_9()
        {
            RunFile("7.6.1-7-9.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, accessed via indexing: null, true, false")]
        public void _7_6_1_8_1()
        {
            RunFile("7.6.1-8-1.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, accessed via indexing: in, try, class")]
        public void _7_6_1_8_10()
        {
            RunFile("7.6.1-8-10.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, accessed via indexing: enum, extends, super")]
        public void _7_6_1_8_11()
        {
            RunFile("7.6.1-8-11.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, accessed via indexing: const, export, import")]
        public void _7_6_1_8_12()
        {
            RunFile("7.6.1-8-12.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, accessed via indexing: implements, let, private")]
        public void _7_6_1_8_13()
        {
            RunFile("7.6.1-8-13.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, accessed via indexing: public, yield, interface")]
        public void _7_6_1_8_14()
        {
            RunFile("7.6.1-8-14.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, accessed via indexing: package, protected, static")]
        public void _7_6_1_8_15()
        {
            RunFile("7.6.1-8-15.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, accessed via indexing: undefined, NaN, Infinity")]
        public void _7_6_1_8_16()
        {
            RunFile("7.6.1-8-16.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, accessed via indexing: break, case, do")]
        public void _7_6_1_8_2()
        {
            RunFile("7.6.1-8-2.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, accessed via indexing: instanceof, typeof, else")]
        public void _7_6_1_8_3()
        {
            RunFile("7.6.1-8-3.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, accessed via indexing: new, var, catch")]
        public void _7_6_1_8_4()
        {
            RunFile("7.6.1-8-4.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, accessed via indexing: finally, return, void")]
        public void _7_6_1_8_5()
        {
            RunFile("7.6.1-8-5.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, accessed via indexing: continue, for, switch")]
        public void _7_6_1_8_6()
        {
            RunFile("7.6.1-8-6.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, accessed via indexing: while, debugger, function")]
        public void _7_6_1_8_7()
        {
            RunFile("7.6.1-8-7.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, accessed via indexing: this, with, default")]
        public void _7_6_1_8_8()
        {
            RunFile("7.6.1-8-8.js");
        }

        [Test(Description = "Allow reserved words as property names by set function within an object, accessed via indexing: if, throw, delete")]
        public void _7_6_1_8_9()
        {
            RunFile("7.6.1-8-9.js");
        }

        [Test(Description = "Strict Mode - SyntaxError is thrown when FutureReservedWord 'implements' occurs in strict mode code")]
        [ExpectedException]
        public void _7_6_1_2_1gs()
        {
            RunFile("7.6.1.2-1gs.js");
        }

        [Test(Description = "Checking if execution of \"null = 1\" fails")]
        [ExpectedException]
        public void S7_6_1_A1_1()
        {
            RunFile("S7.6.1_A1.1.js");
        }

        [Test(Description = "Checking if execution of \"true=1\" fails")]
        [ExpectedException]
        public void S7_6_1_A1_2()
        {
            RunFile("S7.6.1_A1.2.js");
        }

        [Test(Description = "Checking if execution of \"false=1\" fails")]
        [ExpectedException]
        public void S7_6_1_A1_3()
        {
            RunFile("S7.6.1_A1.3.js");
        }

        [Test(Description = "Try assign 1 for not reserved words")]
        public void S7_6_1_A2()
        {
            RunFile("S7.6.1_A2.js");
        }
    }
}
