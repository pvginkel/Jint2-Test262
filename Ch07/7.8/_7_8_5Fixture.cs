//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;

namespace Jint.Test262.Ch07._7_8
{
    [TestFixture]
    public class _7_8_5Fixture : Test262Fixture
    {
        public _7_8_5Fixture()
            : base("ch07\\7.8\\7.8.5")
        {
        }

        [Test(Description = "Literal RegExp Objects - SyntaxError exception is thrown if the RegularExpressionNonTerminator position of a RegularExpressionBackslashSequence is a LineTerminator.")]
        public void _7_8_5_1()
        {
            RunFile("7.8.5-1.js");
        }

        [Test(Description = "Empty literal RegExp should result in a SyntaxError")]
        [ExpectedException]
        public void _7_8_5_1gs()
        {
            RunFile("7.8.5-1gs.js");
        }

        [Test(Description = "Empty dynamic RegExp should not result in a SyntaxError")]
        public void _7_8_5_2gs()
        {
            RunFile("7.8.5-2gs.js");
        }

        [Test(Description = "Without eval")]
        public void S7_8_5_A1_1_T1()
        {
            RunFile("S7.8.5_A1.1_T1.js");
        }

        [Test(Description = "Complex test with eval, using syntax pattern")]
        public void S7_8_5_A1_1_T2()
        {
            RunFile("S7.8.5_A1.1_T2.js");
        }

        [Test(Description = "*")]
        [ExpectedException]
        public void S7_8_5_A1_2_T1()
        {
            RunFile("S7.8.5_A1.2_T1.js");
        }

        [Test(Description = "\\")]
        [ExpectedException]
        public void S7_8_5_A1_2_T2()
        {
            RunFile("S7.8.5_A1.2_T2.js");
        }

        [Test(Description = "/")]
        [ExpectedException]
        public void S7_8_5_A1_2_T3()
        {
            RunFile("S7.8.5_A1.2_T3.js");
        }

        [Test(Description = "[empty]")]
        [ExpectedException]
        public void S7_8_5_A1_2_T4()
        {
            RunFile("S7.8.5_A1.2_T4.js");
        }

        [Test(Description = "Line Feed, without eval")]
        [ExpectedException]
        public void S7_8_5_A1_3_T1()
        {
            RunFile("S7.8.5_A1.3_T1.js");
        }

        [Test(Description = "Line Feed, with eval")]
        public void S7_8_5_A1_3_T2()
        {
            RunFile("S7.8.5_A1.3_T2.js");
        }

        [Test(Description = "Carriage Return, without eval")]
        [ExpectedException]
        public void S7_8_5_A1_3_T3()
        {
            RunFile("S7.8.5_A1.3_T3.js");
        }

        [Test(Description = "Carriage Return, with eval")]
        public void S7_8_5_A1_3_T4()
        {
            RunFile("S7.8.5_A1.3_T4.js");
        }

        [Test(Description = "Line separator, with eval")]
        public void S7_8_5_A1_3_T5()
        {
            RunFile("S7.8.5_A1.3_T5.js");
        }

        [Test(Description = "Paragraph separator, with eval")]
        public void S7_8_5_A1_3_T6()
        {
            RunFile("S7.8.5_A1.3_T6.js");
        }

        [Test(Description = "Check similar to (/\\1/.source === \"\\\\1\")")]
        public void S7_8_5_A1_4_T1()
        {
            RunFile("S7.8.5_A1.4_T1.js");
        }

        [Test(Description = "Complex test with eval, using syntax pattern")]
        public void S7_8_5_A1_4_T2()
        {
            RunFile("S7.8.5_A1.4_T2.js");
        }

        [Test(Description = "Line Feed, without eval")]
        [ExpectedException]
        public void S7_8_5_A1_5_T1()
        {
            RunFile("S7.8.5_A1.5_T1.js");
        }

        [Test(Description = "Line Feed, with eval")]
        public void S7_8_5_A1_5_T2()
        {
            RunFile("S7.8.5_A1.5_T2.js");
        }

        [Test(Description = "Carriage Return, without eval")]
        [ExpectedException]
        public void S7_8_5_A1_5_T3()
        {
            RunFile("S7.8.5_A1.5_T3.js");
        }

        [Test(Description = "Carriage Return, with eval")]
        public void S7_8_5_A1_5_T4()
        {
            RunFile("S7.8.5_A1.5_T4.js");
        }

        [Test(Description = "Line separator, with eval")]
        public void S7_8_5_A1_5_T5()
        {
            RunFile("S7.8.5_A1.5_T5.js");
        }

        [Test(Description = "Paragraph separator, with eval")]
        public void S7_8_5_A1_5_T6()
        {
            RunFile("S7.8.5_A1.5_T6.js");
        }

        [Test(Description = "Without eval")]
        public void S7_8_5_A2_1_T1()
        {
            RunFile("S7.8.5_A2.1_T1.js");
        }

        [Test(Description = "Complex test with eval, using syntax pattern")]
        public void S7_8_5_A2_1_T2()
        {
            RunFile("S7.8.5_A2.1_T2.js");
        }

        [Test(Description = "\\")]
        [ExpectedException]
        public void S7_8_5_A2_2_T1()
        {
            RunFile("S7.8.5_A2.2_T1.js");
        }

        [Test(Description = "/")]
        [ExpectedException]
        public void S7_8_5_A2_2_T2()
        {
            RunFile("S7.8.5_A2.2_T2.js");
        }

        [Test(Description = "Line Feed, without eval")]
        [ExpectedException]
        public void S7_8_5_A2_3_T1()
        {
            RunFile("S7.8.5_A2.3_T1.js");
        }

        [Test(Description = "Line Feed, with eval")]
        public void S7_8_5_A2_3_T2()
        {
            RunFile("S7.8.5_A2.3_T2.js");
        }

        [Test(Description = "Carriage Return, without eval")]
        [ExpectedException]
        public void S7_8_5_A2_3_T3()
        {
            RunFile("S7.8.5_A2.3_T3.js");
        }

        [Test(Description = "Carriage Return, with eval")]
        public void S7_8_5_A2_3_T4()
        {
            RunFile("S7.8.5_A2.3_T4.js");
        }

        [Test(Description = "Line separator, with eval")]
        public void S7_8_5_A2_3_T5()
        {
            RunFile("S7.8.5_A2.3_T5.js");
        }

        [Test(Description = "Paragraph separator, with eval")]
        public void S7_8_5_A2_3_T6()
        {
            RunFile("S7.8.5_A2.3_T6.js");
        }

        [Test(Description = "Check similar to (/a\\1/.source === \"a\\\\1\")")]
        public void S7_8_5_A2_4_T1()
        {
            RunFile("S7.8.5_A2.4_T1.js");
        }

        [Test(Description = "Complex test with eval, using syntax pattern")]
        public void S7_8_5_A2_4_T2()
        {
            RunFile("S7.8.5_A2.4_T2.js");
        }

        [Test(Description = "Line Feed, without eval")]
        [ExpectedException]
        public void S7_8_5_A2_5_T1()
        {
            RunFile("S7.8.5_A2.5_T1.js");
        }

        [Test(Description = "Line Feed, with eval")]
        public void S7_8_5_A2_5_T2()
        {
            RunFile("S7.8.5_A2.5_T2.js");
        }

        [Test(Description = "Carriage Return, without eval")]
        [ExpectedException]
        public void S7_8_5_A2_5_T3()
        {
            RunFile("S7.8.5_A2.5_T3.js");
        }

        [Test(Description = "Carriage Return, with eval")]
        public void S7_8_5_A2_5_T4()
        {
            RunFile("S7.8.5_A2.5_T4.js");
        }

        [Test(Description = "Line separator, with eval")]
        public void S7_8_5_A2_5_T5()
        {
            RunFile("S7.8.5_A2.5_T5.js");
        }

        [Test(Description = "Paragraph separator, with eval")]
        public void S7_8_5_A2_5_T6()
        {
            RunFile("S7.8.5_A2.5_T6.js");
        }

        [Test(Description = "IdentifierPart :: g")]
        public void S7_8_5_A3_1_T1()
        {
            RunFile("S7.8.5_A3.1_T1.js");
        }

        [Test(Description = "IdentifierPart :: i")]
        public void S7_8_5_A3_1_T2()
        {
            RunFile("S7.8.5_A3.1_T2.js");
        }

        [Test(Description = "IdentifierPart :: m")]
        public void S7_8_5_A3_1_T3()
        {
            RunFile("S7.8.5_A3.1_T3.js");
        }

        [Test(Description = "IdentifierPart :: gi")]
        public void S7_8_5_A3_1_T4()
        {
            RunFile("S7.8.5_A3.1_T4.js");
        }

        [Test(Description = "IdentifierPart :: mg")]
        public void S7_8_5_A3_1_T5()
        {
            RunFile("S7.8.5_A3.1_T5.js");
        }

        [Test(Description = "IdentifierPart :: mig")]
        public void S7_8_5_A3_1_T6()
        {
            RunFile("S7.8.5_A3.1_T6.js");
        }

        [Test(Description = "IdentifierPart :: \\u0067 (g)")]
        public void S7_8_5_A3_1_T7()
        {
            RunFile("S7.8.5_A3.1_T7.js");
        }

        [Test(Description = "IdentifierPart :: \\u0069 (i)")]
        public void S7_8_5_A3_1_T8()
        {
            RunFile("S7.8.5_A3.1_T8.js");
        }

        [Test(Description = "IdentifierPart :: \\u006D (m)")]
        public void S7_8_5_A3_1_T9()
        {
            RunFile("S7.8.5_A3.1_T9.js");
        }

        [Test(Description = "Check ((/(?:)/ instanceof RegExp) === true)")]
        public void S7_8_5_A4_1()
        {
            RunFile("S7.8.5_A4.1.js");
        }

        [Test(Description = "Check equality two regular expression literals")]
        public void S7_8_5_A4_2()
        {
            RunFile("S7.8.5_A4.2.js");
        }
    }
}
