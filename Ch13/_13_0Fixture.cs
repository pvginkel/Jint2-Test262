//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;

namespace Jint.Test262.Ch13
{
    [TestFixture]
    public class _13_0Fixture : Test262Fixture
    {
        public _13_0Fixture()
            : base("ch13\\13.0")
        {
        }

        [Test(Description = "13.0 - multiple names in one function declaration is not allowed, two function names")]
        public void _13_0_1()
        {
            RunFile("13.0-1.js");
        }

        [Test(Description = "Strict Mode - SourceElements is evaluated as strict mode code when the code of this FunctionBody with an inner function contains a Use Strict Directive")]
        public void _13_0_10_s()
        {
            RunFile("13.0-10-s.js");
        }

        [Test(Description = "Strict Mode - SourceElements is evaluated as strict mode code when the code of this FunctionBody with an inner function which is in strict mode")]
        public void _13_0_11_s()
        {
            RunFile("13.0-11-s.js");
        }

        [Test(Description = "Strict Mode - SourceElements is not evaluated as strict mode code when a Function constructor is contained in strict mode code and the function constructor body is not strict")]
        public void _13_0_12_s()
        {
            RunFile("13.0-12-s.js");
        }

        [Test(Description = "Strict Mode - SourceElements is evaluated as strict mode code when the function body of a Function constructor begins with a Strict Directive")]
        public void _13_0_13_s()
        {
            RunFile("13.0-13-s.js");
        }

        [Test(Description = "Strict Mode - SourceElements is evaluated as strict mode code when the function body of a Function constructor contains a Strict Directive")]
        public void _13_0_14_s()
        {
            RunFile("13.0-14-s.js");
        }

        [Test(Description = "Strict Mode - SourceElements is evaluated as strict mode code when a FunctionDeclaration is contained in strict mode code within eval code")]
        public void _13_0_15_s()
        {
            RunFile("13.0-15-s.js");
        }

        [Test(Description = "Strict Mode - SourceElements is evaluated as strict mode code when a FunctionExpression is contained in strict mode code within eval code")]
        public void _13_0_16_s()
        {
            RunFile("13.0-16-s.js");
        }

        [Test(Description = "Strict Mode - SourceElements is not evaluated as strict mode code when a Function constructor is contained in strict mode code within eval code")]
        public void _13_0_17_s()
        {
            RunFile("13.0-17-s.js");
        }

        [Test(Description = "13.0 - multiple names in one function declaration is not allowed, three function names")]
        public void _13_0_2()
        {
            RunFile("13.0-2.js");
        }

        [Test(Description = "13.0 - property names in function definition is not allowed, add a new property into object")]
        public void _13_0_3()
        {
            RunFile("13.0-3.js");
        }

        [Test(Description = "13.0 - multiple names in one function declaration is not allowed, add a new property into a property which is a object")]
        public void _13_0_4()
        {
            RunFile("13.0-4.js");
        }

        [Test(Description = "Strict Mode - SourceElements is evaluated as strict mode code when the code of this FunctionDeclaration is contained in non-strict mode but the call to eval is a direct call in strict mode code")]
        public void _13_0_7_s()
        {
            RunFile("13.0-7-s.js");
        }

        [Test(Description = "Strict Mode - SourceElements is evaluated as strict mode code when the code of this FunctionExpression is contained in non-strict mode but the call to eval is a direct call in strict mode code")]
        public void _13_0_8_s()
        {
            RunFile("13.0-8-s.js");
        }

        [Test(Description = "Strict Mode - SourceElements is evaluated as strict mode code when a FunctionDeclaration that is contained in strict mode code has an inner function")]
        public void _13_0_9_s()
        {
            RunFile("13.0-9-s.js");
        }

        [Test(Description = "Strict Mode - SourceElements is not evaluated as strict mode code when a Function constructor is contained in strict mode code")]
        [ExpectedException]
        public void _13_0_4_17gs()
        {
            RunFile("13.0_4-17gs.js");
        }

        [Test(Description = "Strict Mode - SourceElements is evaluated as strict mode code when a FunctionDeclaration is contained in strict mode code")]
        [ExpectedException]
        public void _13_0_4_5gs()
        {
            RunFile("13.0_4-5gs.js");
        }

        [Test(Description = "Checking the type of y")]
        public void S13_A1()
        {
            RunFile("S13_A1.js");
        }

        [Test(Description = "Using function as a property of an object")]
        public void S13_A10()
        {
            RunFile("S13_A10.js");
        }

        [Test(Description = "Returning result of \"delete arguments\"")]
        public void S13_A11_T1()
        {
            RunFile("S13_A11_T1.js");
        }

        [Test(Description = "Checking if deleting the arguments property fails and then returning it")]
        public void S13_A11_T2()
        {
            RunFile("S13_A11_T2.js");
        }

        [Test(Description = "Deleting arguments[i] and returning result of the operation")]
        public void S13_A11_T3()
        {
            RunFile("S13_A11_T3.js");
        }

        [Test(Description = "Deleting arguments[i] and checking the type of arguments[i]")]
        public void S13_A11_T4()
        {
            RunFile("S13_A11_T4.js");
        }

        [Test(Description = "Checking if deleting a function that is declared in global scope fails")]
        public void S13_A12_T1()
        {
            RunFile("S13_A12_T1.js");
        }

        [Test(Description = "Checking if deleting a function that is declared in function scope fails")]
        public void S13_A12_T2()
        {
            RunFile("S13_A12_T2.js");
        }

        [Test(Description = "Deleting arguments[i]")]
        public void S13_A13_T1()
        {
            RunFile("S13_A13_T1.js");
        }

        [Test(Description = "Changing arguments value and then deleting the argument")]
        public void S13_A13_T2()
        {
            RunFile("S13_A13_T2.js");
        }

        [Test(Description = "Changing argument value, deleting the argument and then defining a new value for arguments[i]")]
        public void S13_A13_T3()
        {
            RunFile("S13_A13_T3.js");
        }

        [Test(Description = "Defining function name with unicode symbols")]
        public void S13_A14()
        {
            RunFile("S13_A14.js");
        }

        [Test(Description = "Declaring a function with \"__func(arguments)\"")]
        public void S13_A15_T1()
        {
            RunFile("S13_A15_T1.js");
        }

        [Test(Description = "Overriding arguments within functions body")]
        public void S13_A15_T2()
        {
            RunFile("S13_A15_T2.js");
        }

        [Test(Description = "Declaring a variable named with \"arguments\" without a function")]
        public void S13_A15_T3()
        {
            RunFile("S13_A15_T3.js");
        }

        [Test(Description = "Declaring a variable named with \"arguments\" and following a \"return\" statement within a function body")]
        public void S13_A15_T4()
        {
            RunFile("S13_A15_T4.js");
        }

        [Test(Description = "Creating a variable named with \"arguments\" without a function")]
        public void S13_A15_T5()
        {
            RunFile("S13_A15_T5.js");
        }

        [Test(Description = "Inserting separators between declaration chunks")]
        public void S13_A16()
        {
            RunFile("S13_A16.js");
        }

        [Test(Description = "Trying to call a function before the FunctionExpression appears")]
        public void S13_A17_T1()
        {
            RunFile("S13_A17_T1.js");
        }

        [Test(Description = "Trying to call a function before the FunctionExpression appears and then using the FunctionExpression one more time")]
        public void S13_A17_T2()
        {
            RunFile("S13_A17_T2.js");
        }

        [Test(Description = "Using a function declaration as a function parameter")]
        public void S13_A18()
        {
            RunFile("S13_A18.js");
        }

        [Test(Description = "Creating a function and a variable with identical Identifiers in global scope")]
        public void S13_A19_T1()
        {
            RunFile("S13_A19_T1.js");
        }

        [Test(Description = "Creating a function and a variable with identical Identifiers within function scope")]
        public void S13_A19_T2()
        {
            RunFile("S13_A19_T2.js");
        }

        [Test(Description = "Defining function body with \"return arg\"")]
        public void S13_A2_T1()
        {
            RunFile("S13_A2_T1.js");
        }

        [Test(Description = "Defining function body with \"return arg + arguments[1]\"")]
        public void S13_A2_T2()
        {
            RunFile("S13_A2_T2.js");
        }

        [Test(Description = "Defining function body with \"return arguments[0] +\"-\"+ arguments[1]\"")]
        public void S13_A2_T3()
        {
            RunFile("S13_A2_T3.js");
        }

        [Test(Description = "Creating a recursive function that calculates factorial, as a variable.")]
        public void S13_A3_T1()
        {
            RunFile("S13_A3_T1.js");
        }

        [Test(Description = "Creating a recursive function that calculates factorial, as a variable.")]
        public void S13_A3_T2()
        {
            RunFile("S13_A3_T2.js");
        }

        [Test(Description = "Creating simple recursive function that calculates factorial")]
        public void S13_A3_T3()
        {
            RunFile("S13_A3_T3.js");
        }

        [Test(Description = "Declaring a function that returns string")]
        public void S13_A4_T1()
        {
            RunFile("S13_A4_T1.js");
        }

        [Test(Description = "Declaring a function that uses prefix increment operator within its \"return\" Expression")]
        public void S13_A4_T2()
        {
            RunFile("S13_A4_T2.js");
        }

        [Test(Description = "Declaring a function that uses arithmetical operators within its \"return\" Expression")]
        public void S13_A4_T3()
        {
            RunFile("S13_A4_T3.js");
        }

        [Test(Description = "Declaring a function that uses strings concatenaion opeator within its \"return\" Expression")]
        public void S13_A4_T4()
        {
            RunFile("S13_A4_T4.js");
        }

        [Test(Description = "Duplicating function declaration")]
        public void S13_A6_T1()
        {
            RunFile("S13_A6_T1.js");
        }

        [Test(Description = "Calling a function before it is declared one more time")]
        public void S13_A6_T2()
        {
            RunFile("S13_A6_T2.js");
        }

        [Test(Description = "Using only SourceElements within the FunctionBody")]
        public void S13_A7_T1()
        {
            RunFile("S13_A7_T1.js");
        }

        [Test(Description = "Inserting elements that is different from SourceElements into the FunctionBody")]
        public void S13_A7_T2()
        {
            RunFile("S13_A7_T2.js");
        }

        [Test(Description = "Checking if execution of \"function __func(){\\A\\B\\C}\" fails")]
        [ExpectedException]
        public void S13_A7_T3()
        {
            RunFile("S13_A7_T3.js");
        }

        [Test(Description = "Creating a function declared with \"function __func(param1, param2, param3)\" and using arguments.length property in order to perform the test")]
        public void S13_A8_T1()
        {
            RunFile("S13_A8_T1.js");
        }

        [Test(Description = "Creating a function with no parameters and using arguments.length property in order to perform the test")]
        public void S13_A8_T2()
        {
            RunFile("S13_A8_T2.js");
        }

        [Test(Description = "Using function as argument of another function")]
        public void S13_A9()
        {
            RunFile("S13_A9.js");
        }
    }
}
