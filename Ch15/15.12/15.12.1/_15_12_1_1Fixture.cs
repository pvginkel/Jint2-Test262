//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;

namespace Jint.Test262.Ch15._15_12._15_12_1
{
    [TestFixture]
    public class _15_12_1_1Fixture : Test262Fixture
    {
        public _15_12_1_1Fixture()
            : base("ch15\\15.12\\15.12.1\\15.12.1.1")
        {
        }

        [Test(Description = "The JSON lexical grammar treats whitespace as a token seperator")]
        public void _15_12_1_1_0_1()
        {
            RunFile("15.12.1.1-0-1.js");
        }

        [Test(Description = "<VT> is not valid JSON whitespace as specified by the production JSONWhitespace.")]
        public void _15_12_1_1_0_2()
        {
            RunFile("15.12.1.1-0-2.js");
        }

        [Test(Description = "<FF> is not valid JSON whitespace as specified by the production JSONWhitespace.")]
        public void _15_12_1_1_0_3()
        {
            RunFile("15.12.1.1-0-3.js");
        }

        [Test(Description = "<NBSP> is not valid JSON whitespace as specified by the production JSONWhitespace.")]
        public void _15_12_1_1_0_4()
        {
            RunFile("15.12.1.1-0-4.js");
        }

        [Test(Description = "<ZWSPP> is not valid JSON whitespace as specified by the production JSONWhitespace.")]
        public void _15_12_1_1_0_5()
        {
            RunFile("15.12.1.1-0-5.js");
        }

        [Test(Description = "<BOM> is not valid JSON whitespace as specified by the production JSONWhitespace.")]
        public void _15_12_1_1_0_6()
        {
            RunFile("15.12.1.1-0-6.js");
        }

        [Test(Description = "other category z spaces are not valid JSON whitespace as specified by the production JSONWhitespace.")]
        public void _15_12_1_1_0_7()
        {
            RunFile("15.12.1.1-0-7.js");
        }

        [Test(Description = "U+2028 and U+2029 are not valid JSON whitespace as specified by the production JSONWhitespace.")]
        public void _15_12_1_1_0_8()
        {
            RunFile("15.12.1.1-0-8.js");
        }

        [Test(Description = "Whitespace characters can appear before/after any JSONtoken")]
        public void _15_12_1_1_0_9()
        {
            RunFile("15.12.1.1-0-9.js");
        }

        [Test(Description = "The JSON lexical grammar treats <TAB> as a whitespace character")]
        public void _15_12_1_1_g1_1()
        {
            RunFile("15.12.1.1-g1-1.js");
        }

        [Test(Description = "The JSON lexical grammar treats <CR> as a whitespace character")]
        public void _15_12_1_1_g1_2()
        {
            RunFile("15.12.1.1-g1-2.js");
        }

        [Test(Description = "The JSON lexical grammar treats <LF> as a whitespace character")]
        public void _15_12_1_1_g1_3()
        {
            RunFile("15.12.1.1-g1-3.js");
        }

        [Test(Description = "The JSON lexical grammar treats <SP> as a whitespace character")]
        public void _15_12_1_1_g1_4()
        {
            RunFile("15.12.1.1-g1-4.js");
        }

        [Test(Description = "JSONStrings can be written using double quotes")]
        public void _15_12_1_1_g2_1()
        {
            RunFile("15.12.1.1-g2-1.js");
        }

        [Test(Description = "A JSONString may not be delimited by single quotes ")]
        public void _15_12_1_1_g2_2()
        {
            RunFile("15.12.1.1-g2-2.js");
        }

        [Test(Description = "A JSONString may not be delimited by Uncode escaped quotes ")]
        public void _15_12_1_1_g2_3()
        {
            RunFile("15.12.1.1-g2-3.js");
        }

        [Test(Description = "A JSONString must both begin and end with double quotes")]
        public void _15_12_1_1_g2_4()
        {
            RunFile("15.12.1.1-g2-4.js");
        }

        [Test(Description = "A JSONStrings can contain no JSONStringCharacters (Empty JSONStrings)")]
        public void _15_12_1_1_g2_5()
        {
            RunFile("15.12.1.1-g2-5.js");
        }

        [Test(Description = "The JSON lexical grammar does not allow a JSONStringCharacter to be any of the Unicode characters U+0000 thru U+0007")]
        public void _15_12_1_1_g4_1()
        {
            RunFile("15.12.1.1-g4-1.js");
        }

        [Test(Description = "The JSON lexical grammar does not allow a JSONStringCharacter to be any of the Unicode characters U+0008 thru U+000F")]
        public void _15_12_1_1_g4_2()
        {
            RunFile("15.12.1.1-g4-2.js");
        }

        [Test(Description = "The JSON lexical grammar does not allow a JSONStringCharacter to be any of the Unicode characters U+0010 thru U+0017")]
        public void _15_12_1_1_g4_3()
        {
            RunFile("15.12.1.1-g4-3.js");
        }

        [Test(Description = "The JSON lexical grammar does not allow a JSONStringCharacter to be any of the Unicode characters U+0018 thru U+001F")]
        public void _15_12_1_1_g4_4()
        {
            RunFile("15.12.1.1-g4-4.js");
        }

        [Test(Description = "The JSON lexical grammar allows Unicode escape sequences in a JSONString")]
        public void _15_12_1_1_g5_1()
        {
            RunFile("15.12.1.1-g5-1.js");
        }

        [Test(Description = "A JSONStringCharacter UnicodeEscape may not have fewer than 4 hex characters")]
        public void _15_12_1_1_g5_2()
        {
            RunFile("15.12.1.1-g5-2.js");
        }

        [Test(Description = "A JSONStringCharacter UnicodeEscape may not include any non=hex characters")]
        public void _15_12_1_1_g5_3()
        {
            RunFile("15.12.1.1-g5-3.js");
        }

        [Test(Description = "The JSON lexical grammer allows '/' as a JSONEscapeCharacter after '' in a JSONString")]
        public void _15_12_1_1_g6_1()
        {
            RunFile("15.12.1.1-g6-1.js");
        }

        [Test(Description = "The JSON lexical grammer allows '' as a JSONEscapeCharacter after '' in a JSONString")]
        public void _15_12_1_1_g6_2()
        {
            RunFile("15.12.1.1-g6-2.js");
        }

        [Test(Description = "The JSON lexical grammer allows 'b' as a JSONEscapeCharacter after '' in a JSONString")]
        public void _15_12_1_1_g6_3()
        {
            RunFile("15.12.1.1-g6-3.js");
        }

        [Test(Description = "The JSON lexical grammer allows 'f' as a JSONEscapeCharacter after '' in a JSONString")]
        public void _15_12_1_1_g6_4()
        {
            RunFile("15.12.1.1-g6-4.js");
        }

        [Test(Description = "The JSON lexical grammer allows 'n' as a JSONEscapeCharacter after '' in a JSONString")]
        public void _15_12_1_1_g6_5()
        {
            RunFile("15.12.1.1-g6-5.js");
        }

        [Test(Description = "The JSON lexical grammer allows 'r' as a JSONEscapeCharacter after '' in a JSONString")]
        public void _15_12_1_1_g6_6()
        {
            RunFile("15.12.1.1-g6-6.js");
        }

        [Test(Description = "The JSON lexical grammer allows 't' as a JSONEscapeCharacter after '' in a JSONString")]
        public void _15_12_1_1_g6_7()
        {
            RunFile("15.12.1.1-g6-7.js");
        }
    }
}
