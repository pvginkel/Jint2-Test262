//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;

namespace Jint.Test262.Ch15._15_10
{
    [TestFixture]
    public class _15_10_4Fixture : Test262Fixture
    {
        public _15_10_4Fixture()
            : base("ch15\\15.10\\15.10.4")
        {
        }

        [Test(Description = "Pattern is /./i and RegExp is new RegExp(pattern)")]
        public void S15_10_4_1_A1_T1()
        {
            RunFile("S15.10.4.1_A1_T1.js");
        }

        [Test(Description = "Pattern is /\\t/m and RegExp is new RegExp(pattern,x), where x is undefined variable")]
        public void S15_10_4_1_A1_T2()
        {
            RunFile("S15.10.4.1_A1_T2.js");
        }

        [Test(Description = "Pattern is /[a-b]/g and RegExp is new RegExp(pattern,void 0)")]
        public void S15_10_4_1_A1_T3()
        {
            RunFile("S15.10.4.1_A1_T3.js");
        }

        [Test(Description = "Pattern is new RegExp and RegExp is new RegExp(pattern,undefined)")]
        public void S15_10_4_1_A1_T4()
        {
            RunFile("S15.10.4.1_A1_T4.js");
        }

        [Test(Description = "Pattern is RegExp(\"1?\",\"mig\") and RegExp is new RegExp(pattern,(function(){})())")]
        public void S15_10_4_1_A1_T5()
        {
            RunFile("S15.10.4.1_A1_T5.js");
        }

        [Test(Description = "Checking if execution of \"new RegExp(pattern, \"i\")\", where the pattern is \"/\\u0042/i\", fails")]
        public void S15_10_4_1_A2_T1()
        {
            RunFile("S15.10.4.1_A2_T1.js");
        }

        [Test(Description = "Checking if execution of \"new RegExp(pattern, {})\", where the pattern is \"/1?1/mig\", fails")]
        public void S15_10_4_1_A2_T2()
        {
            RunFile("S15.10.4.1_A2_T2.js");
        }

        [Test(Description = "RegExp is new RegExp")]
        public void S15_10_4_1_A3_T1()
        {
            RunFile("S15.10.4.1_A3_T1.js");
        }

        [Test(Description = "RegExp is new RegExp(void 0)")]
        public void S15_10_4_1_A3_T2()
        {
            RunFile("S15.10.4.1_A3_T2.js");
        }

        [Test(Description = "RegExp is new RegExp(x), where x is undefined variable")]
        public void S15_10_4_1_A3_T3()
        {
            RunFile("S15.10.4.1_A3_T3.js");
        }

        [Test(Description = "RegExp is new RegExp(undefined)")]
        public void S15_10_4_1_A3_T4()
        {
            RunFile("S15.10.4.1_A3_T4.js");
        }

        [Test(Description = "RegExp is new RegExp((function(){})())")]
        public void S15_10_4_1_A3_T5()
        {
            RunFile("S15.10.4.1_A3_T5.js");
        }

        [Test(Description = "RegExp is new RegExp(undefined)")]
        public void S15_10_4_1_A4_T1()
        {
            RunFile("S15.10.4.1_A4_T1.js");
        }

        [Test(Description = "RegExp is new RegExp(undefined,undefined)")]
        public void S15_10_4_1_A4_T2()
        {
            RunFile("S15.10.4.1_A4_T2.js");
        }

        [Test(Description = "Use undefined properties of object as flags of RegExp")]
        public void S15_10_4_1_A4_T3()
        {
            RunFile("S15.10.4.1_A4_T3.js");
        }

        [Test(Description = "RegExp is new RegExp(null,void 0)")]
        public void S15_10_4_1_A4_T4()
        {
            RunFile("S15.10.4.1_A4_T4.js");
        }

        [Test(Description = "RegExp is new RegExp(\"\",(function(){})())")]
        public void S15_10_4_1_A4_T5()
        {
            RunFile("S15.10.4.1_A4_T5.js");
        }

        [Test(Description = "Checking if using \"ii\" as F leads to throwing the correct exception")]
        public void S15_10_4_1_A5_T1()
        {
            RunFile("S15.10.4.1_A5_T1.js");
        }

        [Test(Description = "Checking if using \"migg\" as F leads to throwing the correct exception")]
        public void S15_10_4_1_A5_T2()
        {
            RunFile("S15.10.4.1_A5_T2.js");
        }

        [Test(Description = "Checking by using eval, try to use eval(\"\\\"migg\\\"\") as F")]
        public void S15_10_4_1_A5_T3()
        {
            RunFile("S15.10.4.1_A5_T3.js");
        }

        [Test(Description = "Checking if using \"z\" as F leads to throwing the correct exception")]
        public void S15_10_4_1_A5_T4()
        {
            RunFile("S15.10.4.1_A5_T4.js");
        }

        [Test(Description = "Checking if using \"null\" as F leads to throwing the correct exception")]
        public void S15_10_4_1_A5_T6()
        {
            RunFile("S15.10.4.1_A5_T6.js");
        }

        [Test(Description = "Checking if using 1.0 as F leads to throwing the correct exception")]
        public void S15_10_4_1_A5_T7()
        {
            RunFile("S15.10.4.1_A5_T7.js");
        }

        [Test(Description = "Checking if using \"true\" as F leads to throwing the correct exception")]
        public void S15_10_4_1_A5_T8()
        {
            RunFile("S15.10.4.1_A5_T8.js");
        }

        [Test(Description = "Checking if using \"{toString:function(){}}\" as F leads to throwing the correct exception")]
        public void S15_10_4_1_A5_T9()
        {
            RunFile("S15.10.4.1_A5_T9.js");
        }

        [Test(Description = "Checking [[Class]] property of the newly constructed object")]
        public void S15_10_4_1_A6_T1()
        {
            RunFile("S15.10.4.1_A6_T1.js");
        }

        [Test(Description = "Add new property to [[Prototype]] of REgExp and check this property of the newly constructed object")]
        public void S15_10_4_1_A7_T1()
        {
            RunFile("S15.10.4.1_A7_T1.js");
        }

        [Test(Description = "Checking [[Prototype]] property of the newly constructed object")]
        public void S15_10_4_1_A7_T2()
        {
            RunFile("S15.10.4.1_A7_T2.js");
        }

        [Test(Description = "Pattern is \"a|b\" and flags is \"i\"")]
        public void S15_10_4_1_A8_T1()
        {
            RunFile("S15.10.4.1_A8_T1.js");
        }

        [Test(Description = "Pattern is true and flags is \"m\"")]
        public void S15_10_4_1_A8_T10()
        {
            RunFile("S15.10.4.1_A8_T10.js");
        }

        [Test(Description = "Checking by using eval, pattern is Math and flags is eval(\"\\\"g\\\"\")")]
        public void S15_10_4_1_A8_T11()
        {
            RunFile("S15.10.4.1_A8_T11.js");
        }

        [Test(Description = "Pattern is \"\\u0042\" and flags is {toString:void 0, valueOf:function(){throw \"invalof\";} }")]
        public void S15_10_4_1_A8_T12()
        {
            RunFile("S15.10.4.1_A8_T12.js");
        }

        [Test(Description = "Pattern is \"1\" and flags is {toString:function(){throw \"intostr\";} }")]
        public void S15_10_4_1_A8_T13()
        {
            RunFile("S15.10.4.1_A8_T13.js");
        }

        [Test(Description = "Pattern is function(){return \"a|b|[]\";}() and flags is \"ig\"")]
        public void S15_10_4_1_A8_T2()
        {
            RunFile("S15.10.4.1_A8_T2.js");
        }

        [Test(Description = "Pattern is {toString:function(){return \"[0-9]\";}} and flags is (function(){return \"m\";})()")]
        public void S15_10_4_1_A8_T3()
        {
            RunFile("S15.10.4.1_A8_T3.js");
        }

        [Test(Description = "Pattern is {toString:void 0,valueOf:function(){return \"[z-z]\";}} and flags is {toString:void 0,valueOf:function(){return \"mig\";}}")]
        public void S15_10_4_1_A8_T4()
        {
            RunFile("S15.10.4.1_A8_T4.js");
        }

        [Test(Description = "Pattern is new Object(\"abc{1}\") and flags is {toString:function(){return \"\";}}")]
        public void S15_10_4_1_A8_T5()
        {
            RunFile("S15.10.4.1_A8_T5.js");
        }

        [Test(Description = "Pattern is {toString:function(){throw \"intostr\";} } and flags is \"i\"")]
        public void S15_10_4_1_A8_T6()
        {
            RunFile("S15.10.4.1_A8_T6.js");
        }

        [Test(Description = "Pattern is {toString:void 0, valueOf:function(){throw \"invalof\";} } and flags is \"i\"")]
        public void S15_10_4_1_A8_T7()
        {
            RunFile("S15.10.4.1_A8_T7.js");
        }

        [Test(Description = "Pattern is {toString:function(){throw \"intostr\";} } and flags is \"error\"")]
        public void S15_10_4_1_A8_T8()
        {
            RunFile("S15.10.4.1_A8_T8.js");
        }

        [Test(Description = "Pattern is 1 and flags is new Object(\"gi\")")]
        public void S15_10_4_1_A8_T9()
        {
            RunFile("S15.10.4.1_A8_T9.js");
        }

        [Test(Description = "Pattern is \"??\"")]
        public void S15_10_4_1_A9_T1()
        {
            RunFile("S15.10.4.1_A9_T1.js");
        }

        [Test(Description = "Pattern is \"[{-z]\"")]
        public void S15_10_4_1_A9_T2()
        {
            RunFile("S15.10.4.1_A9_T2.js");
        }

        [Test(Description = "Pattern is \"[a--z]\"")]
        public void S15_10_4_1_A9_T3()
        {
            RunFile("S15.10.4.1_A9_T3.js");
        }
    }
}
