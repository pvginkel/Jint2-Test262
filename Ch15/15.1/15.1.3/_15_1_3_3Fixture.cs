//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;

namespace Jint.Test262.Ch15._15_1._15_1_3
{
    [TestFixture]
    public class _15_1_3_3Fixture : Test262Fixture
    {
        public _15_1_3_3Fixture()
            : base("ch15\\15.1\\15.1.3\\15.1.3.3")
        {
        }

        [Test(Description = "Complex tests")]
        public void S15_1_3_3_A1_1_T1()
        {
            RunFile("S15.1.3.3_A1.1_T1.js");
        }

        [Test(Description = "Complex tests")]
        public void S15_1_3_3_A1_1_T2()
        {
            RunFile("S15.1.3.3_A1.1_T2.js");
        }

        [Test(Description = "Complex tests")]
        public void S15_1_3_3_A1_2_T1()
        {
            RunFile("S15.1.3.3_A1.2_T1.js");
        }

        [Test(Description = "Complex tests")]
        public void S15_1_3_3_A1_2_T2()
        {
            RunFile("S15.1.3.3_A1.2_T2.js");
        }

        [Test(Description = "Complex tests, string.charAt(k+1) in [0x0000, 0xD7FF, 0xD800, 0xDBFE, 0xDBFF, 0xE000, 0xFFFF]")]
        public void S15_1_3_3_A1_3_T1()
        {
            RunFile("S15.1.3.3_A1.3_T1.js");
        }

        [Test(Description = "Complex tests, use RFC 3629")]
        public void S15_1_3_3_A2_1_T1()
        {
            RunFile("S15.1.3.3_A2.1_T1.js");
        }

        [Test(Description = "Complex tests, use RFC 3629")]
        public void S15_1_3_3_A2_2_T1()
        {
            RunFile("S15.1.3.3_A2.2_T1.js");
        }

        [Test(Description = "Complex tests, use RFC 3629")]
        public void S15_1_3_3_A2_3_T1()
        {
            RunFile("S15.1.3.3_A2.3_T1.js");
        }

        [Test(Description = "Complex tests, use RFC 3629, string.charAt(k+1) in [0xDC00, 0xDDFF, 0xDFFF]")]
        public void S15_1_3_3_A2_4_T1()
        {
            RunFile("S15.1.3.3_A2.4_T1.js");
        }

        [Test(Description = "Complex tests, use RFC 3629, string.charAt(k) in [0xD800, 0xDBFF, 0xD9FF]")]
        public void S15_1_3_3_A2_4_T2()
        {
            RunFile("S15.1.3.3_A2.4_T2.js");
        }

        [Test(Description = "Complex tests, use RFC 3629")]
        public void S15_1_3_3_A2_5_T1()
        {
            RunFile("S15.1.3.3_A2.5_T1.js");
        }

        [Test(Description = "Complex tests")]
        public void S15_1_3_3_A3_1_T1()
        {
            RunFile("S15.1.3.3_A3.1_T1.js");
        }

        [Test(Description = "Complex tests, uriUnescaped :: uriAlpha")]
        public void S15_1_3_3_A3_2_T1()
        {
            RunFile("S15.1.3.3_A3.2_T1.js");
        }

        [Test(Description = "Complex tests, uriUnescaped :: DecimalDigit")]
        public void S15_1_3_3_A3_2_T2()
        {
            RunFile("S15.1.3.3_A3.2_T2.js");
        }

        [Test(Description = "Complex tests, uriUnescaped :: uriMark")]
        public void S15_1_3_3_A3_2_T3()
        {
            RunFile("S15.1.3.3_A3.2_T3.js");
        }

        [Test(Description = "encodeURI(\"#\") === \"#\"")]
        public void S15_1_3_3_A3_3_T1()
        {
            RunFile("S15.1.3.3_A3.3_T1.js");
        }

        [Test(Description = "Checking ENGLISH ALPHABET")]
        public void S15_1_3_3_A4_T1()
        {
            RunFile("S15.1.3.3_A4_T1.js");
        }

        [Test(Description = "Checking RUSSIAN ALPHABET")]
        public void S15_1_3_3_A4_T2()
        {
            RunFile("S15.1.3.3_A4_T2.js");
        }

        [Test(Description = "Checking URL with Line Terminator")]
        public void S15_1_3_3_A4_T3()
        {
            RunFile("S15.1.3.3_A4_T3.js");
        }

        [Test(Description = "Test some url")]
        public void S15_1_3_3_A4_T4()
        {
            RunFile("S15.1.3.3_A4_T4.js");
        }

        [Test(Description = "Checking use propertyIsEnumerable, for-in")]
        public void S15_1_3_3_A5_1()
        {
            RunFile("S15.1.3.3_A5.1.js");
        }

        [Test(Description = "Checking use hasOwnProperty, delete")]
        public void S15_1_3_3_A5_2()
        {
            RunFile("S15.1.3.3_A5.2.js");
        }

        [Test(Description = "Checking if varying the length property fails")]
        public void S15_1_3_3_A5_3()
        {
            RunFile("S15.1.3.3_A5.3.js");
        }

        [Test(Description = "encodeURI.length === 1")]
        public void S15_1_3_3_A5_4()
        {
            RunFile("S15.1.3.3_A5.4.js");
        }

        [Test(Description = "Checking use propertyIsEnumerable, for-in")]
        public void S15_1_3_3_A5_5()
        {
            RunFile("S15.1.3.3_A5.5.js");
        }

        [Test(Description = "Checking encodeURI.prototype")]
        public void S15_1_3_3_A5_6()
        {
            RunFile("S15.1.3.3_A5.6.js");
        }

        [Test(Description = "If property does not implement the internal [[Construct]] method, throw a TypeError exception")]
        public void S15_1_3_3_A5_7()
        {
            RunFile("S15.1.3.3_A5.7.js");
        }

        [Test(Description = "If Type(value) is Object, evaluate ToPrimitive(value, String)")]
        public void S15_1_3_3_A6_T1()
        {
            RunFile("S15.1.3.3_A6_T1.js");
        }
    }
}
