//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;

namespace Jint.Test262.Ch15._15_1._15_1_2
{
    [TestFixture]
    public class _15_1_2_3Fixture : Test262Fixture
    {
        public _15_1_2_3Fixture()
            : base("ch15\\15.1\\15.1.2\\15.1.2.3")
        {
        }

        [Test(Description = "pareseFloat - 'trimmedString' is the empty string when inputString does not contain any such characters")]
        public void _15_1_2_3_2_1()
        {
            RunFile("15.1.2.3-2-1.js");
        }

        [Test(Description = "Checking for boolean primitive")]
        public void S15_1_2_3_A1_T1()
        {
            RunFile("S15.1.2.3_A1_T1.js");
        }

        [Test(Description = "Checking for number primitive")]
        public void S15_1_2_3_A1_T2()
        {
            RunFile("S15.1.2.3_A1_T2.js");
        }

        [Test(Description = "Checking for undefined and null")]
        public void S15_1_2_3_A1_T3()
        {
            RunFile("S15.1.2.3_A1_T3.js");
        }

        [Test(Description = "Checking for Boolean object")]
        public void S15_1_2_3_A1_T4()
        {
            RunFile("S15.1.2.3_A1_T4.js");
        }

        [Test(Description = "Checking for Number object")]
        public void S15_1_2_3_A1_T5()
        {
            RunFile("S15.1.2.3_A1_T5.js");
        }

        [Test(Description = "Checking for String object")]
        public void S15_1_2_3_A1_T6()
        {
            RunFile("S15.1.2.3_A1_T6.js");
        }

        [Test(Description = "If Type(value) is Object, evaluate ToPrimitive(value, String)")]
        public void S15_1_2_3_A1_T7()
        {
            RunFile("S15.1.2.3_A1_T7.js");
        }

        [Test(Description = "StrWhiteSpaceChar :: TAB (U+0009)")]
        public void S15_1_2_3_A2_T1()
        {
            RunFile("S15.1.2.3_A2_T1.js");
        }

        [Test(Description = "StrWhiteSpaceChar :: USP")]
        public void S15_1_2_3_A2_T10()
        {
            RunFile("S15.1.2.3_A2_T10.js");
        }

        [Test(Description = "StrWhiteSpaceChar :: SP (U+0020)")]
        public void S15_1_2_3_A2_T2()
        {
            RunFile("S15.1.2.3_A2_T2.js");
        }

        [Test(Description = "StrWhiteSpaceChar :: NBSB (U+00A0)")]
        public void S15_1_2_3_A2_T3()
        {
            RunFile("S15.1.2.3_A2_T3.js");
        }

        [Test(Description = "StrWhiteSpaceChar :: FF (U+000C)")]
        public void S15_1_2_3_A2_T4()
        {
            RunFile("S15.1.2.3_A2_T4.js");
        }

        [Test(Description = "StrWhiteSpaceChar :: VT (U+000B)")]
        public void S15_1_2_3_A2_T5()
        {
            RunFile("S15.1.2.3_A2_T5.js");
        }

        [Test(Description = "StrWhiteSpaceChar :: CR (U+000D)")]
        public void S15_1_2_3_A2_T6()
        {
            RunFile("S15.1.2.3_A2_T6.js");
        }

        [Test(Description = "StrWhiteSpaceChar :: LF (U+000A)")]
        public void S15_1_2_3_A2_T7()
        {
            RunFile("S15.1.2.3_A2_T7.js");
        }

        [Test(Description = "StrWhiteSpaceChar :: LS (U+2028)")]
        public void S15_1_2_3_A2_T8()
        {
            RunFile("S15.1.2.3_A2_T8.js");
        }

        [Test(Description = "StrWhiteSpaceChar :: PS (U+2029)")]
        public void S15_1_2_3_A2_T9()
        {
            RunFile("S15.1.2.3_A2_T9.js");
        }

        [Test(Description = "parseFloat(\"some string\") return NaN")]
        public void S15_1_2_3_A3_T1()
        {
            RunFile("S15.1.2.3_A3_T1.js");
        }

        [Test(Description = "parseFloat(\"wrong number format with ExponentIndicator\") return NaN")]
        public void S15_1_2_3_A3_T2()
        {
            RunFile("S15.1.2.3_A3_T2.js");
        }

        [Test(Description = "parseFloat(\"wrong numbr format\") return NaN")]
        public void S15_1_2_3_A3_T3()
        {
            RunFile("S15.1.2.3_A3_T3.js");
        }

        [Test(Description = "Some wrong number")]
        public void S15_1_2_3_A4_T1()
        {
            RunFile("S15.1.2.3_A4_T1.js");
        }

        [Test(Description = "With ExponentIndicator")]
        public void S15_1_2_3_A4_T2()
        {
            RunFile("S15.1.2.3_A4_T2.js");
        }

        [Test(Description = "StrDecimalLiteral not contain HexIntegerLiteral")]
        public void S15_1_2_3_A4_T3()
        {
            RunFile("S15.1.2.3_A4_T3.js");
        }

        [Test(Description = "\"Infinity\"+\"some string\"")]
        public void S15_1_2_3_A4_T4()
        {
            RunFile("S15.1.2.3_A4_T4.js");
        }

        [Test(Description = "Checking DecimalDigits . DecimalDigits_opt ExponentPart_opt")]
        public void S15_1_2_3_A4_T5()
        {
            RunFile("S15.1.2.3_A4_T5.js");
        }

        [Test(Description = "Checking . DecimalDigits ExponentPart_opt")]
        public void S15_1_2_3_A4_T6()
        {
            RunFile("S15.1.2.3_A4_T6.js");
        }

        [Test(Description = "Checking DecimalDigits ExponentPart_opt")]
        public void S15_1_2_3_A4_T7()
        {
            RunFile("S15.1.2.3_A4_T7.js");
        }

        [Test(Description = "Checking Infinity")]
        public void S15_1_2_3_A5_T1()
        {
            RunFile("S15.1.2.3_A5_T1.js");
        }

        [Test(Description = "Checking DecimalDigits . DecimalDigits_opt ExponentPart_opt")]
        public void S15_1_2_3_A5_T2()
        {
            RunFile("S15.1.2.3_A5_T2.js");
        }

        [Test(Description = "Checking . DecimalDigits ExponentPart_opt")]
        public void S15_1_2_3_A5_T3()
        {
            RunFile("S15.1.2.3_A5_T3.js");
        }

        [Test(Description = "Checking DecimalDigits ExponentPart_opt")]
        public void S15_1_2_3_A5_T4()
        {
            RunFile("S15.1.2.3_A5_T4.js");
        }

        [Test(Description = "Complex test without eval")]
        public void S15_1_2_3_A6()
        {
            RunFile("S15.1.2.3_A6.js");
        }

        [Test(Description = "Checking use propertyIsEnumerable, for-in")]
        public void S15_1_2_3_A7_1()
        {
            RunFile("S15.1.2.3_A7.1.js");
        }

        [Test(Description = "Checking use hasOwnProperty, delete")]
        public void S15_1_2_3_A7_2()
        {
            RunFile("S15.1.2.3_A7.2.js");
        }

        [Test(Description = "Checking if varying the length property fails")]
        public void S15_1_2_3_A7_3()
        {
            RunFile("S15.1.2.3_A7.3.js");
        }

        [Test(Description = "parseFloat.length === 1")]
        public void S15_1_2_3_A7_4()
        {
            RunFile("S15.1.2.3_A7.4.js");
        }

        [Test(Description = "Checking use propertyIsEnumerable, for-in")]
        public void S15_1_2_3_A7_5()
        {
            RunFile("S15.1.2.3_A7.5.js");
        }

        [Test(Description = "Checking parseFloat.prototype")]
        public void S15_1_2_3_A7_6()
        {
            RunFile("S15.1.2.3_A7.6.js");
        }

        [Test(Description = "If property does not implement the internal [[Construct]] method, throw a TypeError exception")]
        public void S15_1_2_3_A7_7()
        {
            RunFile("S15.1.2.3_A7.7.js");
        }
    }
}
