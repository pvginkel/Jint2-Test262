//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;

namespace Jint.Test262.Ch15._15_1._15_1_2
{
    [TestFixture]
    public class _15_1_2_2Fixture : Test262Fixture
    {
        public _15_1_2_2Fixture()
            : base("ch15\\15.1\\15.1.2\\15.1.2.2")
        {
        }

        [Test(Description = "pareseInt - 'S' is the empty string when inputString does not contain any such characters")]
        public void _15_1_2_2_2_1()
        {
            RunFile("15.1.2.2-2-1.js");
        }

        [Test(Description = "Checking for boolean primitive")]
        public void S15_1_2_2_A1_T1()
        {
            RunFile("S15.1.2.2_A1_T1.js");
        }

        [Test(Description = "Checking for number primitive")]
        public void S15_1_2_2_A1_T2()
        {
            RunFile("S15.1.2.2_A1_T2.js");
        }

        [Test(Description = "Checking for undefined and null")]
        public void S15_1_2_2_A1_T3()
        {
            RunFile("S15.1.2.2_A1_T3.js");
        }

        [Test(Description = "Checking for Boolean object")]
        public void S15_1_2_2_A1_T4()
        {
            RunFile("S15.1.2.2_A1_T4.js");
        }

        [Test(Description = "Checking for Number object")]
        public void S15_1_2_2_A1_T5()
        {
            RunFile("S15.1.2.2_A1_T5.js");
        }

        [Test(Description = "Checking for String object")]
        public void S15_1_2_2_A1_T6()
        {
            RunFile("S15.1.2.2_A1_T6.js");
        }

        [Test(Description = "If Type(value) is Object, evaluate ToPrimitive(value, String)")]
        public void S15_1_2_2_A1_T7()
        {
            RunFile("S15.1.2.2_A1_T7.js");
        }

        [Test(Description = "StrWhiteSpaceChar :: TAB (U+0009)")]
        public void S15_1_2_2_A2_T1()
        {
            RunFile("S15.1.2.2_A2_T1.js");
        }

        [Test(Description = "StrWhiteSpaceChar :: USP")]
        public void S15_1_2_2_A2_T10()
        {
            RunFile("S15.1.2.2_A2_T10.js");
        }

        [Test(Description = "StrWhiteSpaceChar :: SP (U+0020)")]
        public void S15_1_2_2_A2_T2()
        {
            RunFile("S15.1.2.2_A2_T2.js");
        }

        [Test(Description = "StrWhiteSpaceChar :: NBSB (U+00A0)")]
        public void S15_1_2_2_A2_T3()
        {
            RunFile("S15.1.2.2_A2_T3.js");
        }

        [Test(Description = "StrWhiteSpaceChar :: FF (U+000C)")]
        public void S15_1_2_2_A2_T4()
        {
            RunFile("S15.1.2.2_A2_T4.js");
        }

        [Test(Description = "StrWhiteSpaceChar :: VT (U+000B)")]
        public void S15_1_2_2_A2_T5()
        {
            RunFile("S15.1.2.2_A2_T5.js");
        }

        [Test(Description = "StrWhiteSpaceChar :: CR (U+000D)")]
        public void S15_1_2_2_A2_T6()
        {
            RunFile("S15.1.2.2_A2_T6.js");
        }

        [Test(Description = "StrWhiteSpaceChar :: LF (U+000A)")]
        public void S15_1_2_2_A2_T7()
        {
            RunFile("S15.1.2.2_A2_T7.js");
        }

        [Test(Description = "StrWhiteSpaceChar :: LS (U+2028)")]
        public void S15_1_2_2_A2_T8()
        {
            RunFile("S15.1.2.2_A2_T8.js");
        }

        [Test(Description = "StrWhiteSpaceChar :: PS (U+2029)")]
        public void S15_1_2_2_A2_T9()
        {
            RunFile("S15.1.2.2_A2_T9.js");
        }

        [Test(Description = "Checking for boolean primitive")]
        public void S15_1_2_2_A3_1_T1()
        {
            RunFile("S15.1.2.2_A3.1_T1.js");
        }

        [Test(Description = "Checking for string primitive")]
        public void S15_1_2_2_A3_1_T2()
        {
            RunFile("S15.1.2.2_A3.1_T2.js");
        }

        [Test(Description = "Checking for undefined and null")]
        public void S15_1_2_2_A3_1_T3()
        {
            RunFile("S15.1.2.2_A3.1_T3.js");
        }

        [Test(Description = "Checking for Boolean object")]
        public void S15_1_2_2_A3_1_T4()
        {
            RunFile("S15.1.2.2_A3.1_T4.js");
        }

        [Test(Description = "Checking for Number object")]
        public void S15_1_2_2_A3_1_T5()
        {
            RunFile("S15.1.2.2_A3.1_T5.js");
        }

        [Test(Description = "Checking for String object")]
        public void S15_1_2_2_A3_1_T6()
        {
            RunFile("S15.1.2.2_A3.1_T6.js");
        }

        [Test(Description = "If Type(value) is Object, evaluate ToPrimitive(value, Number)")]
        public void S15_1_2_2_A3_1_T7()
        {
            RunFile("S15.1.2.2_A3.1_T7.js");
        }

        [Test(Description = "If radix is NaN, +0, -0, +Infinity, -Infinity, return radix = +0")]
        public void S15_1_2_2_A3_2_T1()
        {
            RunFile("S15.1.2.2_A3.2_T1.js");
        }

        [Test(Description = "ToInt32 use floor")]
        public void S15_1_2_2_A3_2_T2()
        {
            RunFile("S15.1.2.2_A3.2_T2.js");
        }

        [Test(Description = "ToInt32 use modulo")]
        public void S15_1_2_2_A3_2_T3()
        {
            RunFile("S15.1.2.2_A3.2_T3.js");
        }

        [Test(Description = "R = 0")]
        public void S15_1_2_2_A4_1_T1()
        {
            RunFile("S15.1.2.2_A4.1_T1.js");
        }

        [Test(Description = "R = undefined")]
        public void S15_1_2_2_A4_1_T2()
        {
            RunFile("S15.1.2.2_A4.1_T2.js");
        }

        [Test(Description = "R = 1")]
        public void S15_1_2_2_A4_2_T1()
        {
            RunFile("S15.1.2.2_A4.2_T1.js");
        }

        [Test(Description = "R = 37")]
        public void S15_1_2_2_A4_2_T2()
        {
            RunFile("S15.1.2.2_A4.2_T2.js");
        }

        [Test(Description = "Complex test")]
        public void S15_1_2_2_A4_2_T3()
        {
            RunFile("S15.1.2.2_A4.2_T3.js");
        }

        [Test(Description = "Check if parseInt still accepts octal")]
        public void S15_1_2_2_A5_1_T1()
        {
            RunFile("S15.1.2.2_A5.1_T1.js");
        }

        [Test(Description = ": 0x")]
        public void S15_1_2_2_A5_2_T1()
        {
            RunFile("S15.1.2.2_A5.2_T1.js");
        }

        [Test(Description = ": 0X")]
        public void S15_1_2_2_A5_2_T2()
        {
            RunFile("S15.1.2.2_A5.2_T2.js");
        }

        [Test(Description = "Complex test. R in [2, 36]")]
        public void S15_1_2_2_A6_1_T1()
        {
            RunFile("S15.1.2.2_A6.1_T1.js");
        }

        [Test(Description = "Complex test. Radix-R notation in [0..9, A-Z]")]
        public void S15_1_2_2_A6_1_T2()
        {
            RunFile("S15.1.2.2_A6.1_T2.js");
        }

        [Test(Description = "Complex test. Radix-R notation in [0..9, a-z]")]
        public void S15_1_2_2_A6_1_T3()
        {
            RunFile("S15.1.2.2_A6.1_T3.js");
        }

        [Test(Description = "Complex test. Radix-R notation in [0..9, A-Z]")]
        public void S15_1_2_2_A6_1_T4()
        {
            RunFile("S15.1.2.2_A6.1_T4.js");
        }

        [Test(Description = "Complex test. Radix-R notation in [0..9, a-z]")]
        public void S15_1_2_2_A6_1_T5()
        {
            RunFile("S15.1.2.2_A6.1_T5.js");
        }

        [Test(Description = "Complex test. Radix-R notation in [0..9]")]
        public void S15_1_2_2_A6_1_T6()
        {
            RunFile("S15.1.2.2_A6.1_T6.js");
        }

        [Test(Description = "Complex test. R in [2, 36]")]
        public void S15_1_2_2_A7_1_T1()
        {
            RunFile("S15.1.2.2_A7.1_T1.js");
        }

        [Test(Description = "x is not a radix-R digit")]
        public void S15_1_2_2_A7_1_T2()
        {
            RunFile("S15.1.2.2_A7.1_T2.js");
        }

        [Test(Description = "Complex test. Check algorithm")]
        public void S15_1_2_2_A7_2_T1()
        {
            RunFile("S15.1.2.2_A7.2_T1.js");
        }

        [Test(Description = "Checking algorithm for R = 2")]
        public void S15_1_2_2_A7_2_T2()
        {
            RunFile("S15.1.2.2_A7.2_T2.js");
        }

        [Test(Description = "Checking algorithm for R = 16")]
        public void S15_1_2_2_A7_2_T3()
        {
            RunFile("S15.1.2.2_A7.2_T3.js");
        }

        [Test(Description = "Complex test. Check algorithm")]
        public void S15_1_2_2_A7_3_T1()
        {
            RunFile("S15.1.2.2_A7.3_T1.js");
        }

        [Test(Description = "Checking algorithm for R = 2")]
        public void S15_1_2_2_A7_3_T2()
        {
            RunFile("S15.1.2.2_A7.3_T2.js");
        }

        [Test(Description = "Checking algorithm for R = 10")]
        public void S15_1_2_2_A7_3_T3()
        {
            RunFile("S15.1.2.2_A7.3_T3.js");
        }

        [Test(Description = "Complex test without eval")]
        public void S15_1_2_2_A8()
        {
            RunFile("S15.1.2.2_A8.js");
        }

        [Test(Description = "Checking use propertyIsEnumerable, for-in")]
        public void S15_1_2_2_A9_1()
        {
            RunFile("S15.1.2.2_A9.1.js");
        }

        [Test(Description = "Checking use hasOwnProperty, delete")]
        public void S15_1_2_2_A9_2()
        {
            RunFile("S15.1.2.2_A9.2.js");
        }

        [Test(Description = "Checking if varying the length property fails")]
        public void S15_1_2_2_A9_3()
        {
            RunFile("S15.1.2.2_A9.3.js");
        }

        [Test(Description = "parseInt.length === 2")]
        public void S15_1_2_2_A9_4()
        {
            RunFile("S15.1.2.2_A9.4.js");
        }

        [Test(Description = "Checking use propertyIsEnumerable, for-in")]
        public void S15_1_2_2_A9_5()
        {
            RunFile("S15.1.2.2_A9.5.js");
        }

        [Test(Description = "Checking parseInt.prototype")]
        public void S15_1_2_2_A9_6()
        {
            RunFile("S15.1.2.2_A9.6.js");
        }

        [Test(Description = "If property does not implement the internal [[Construct]] method, throw a TypeError exception")]
        public void S15_1_2_2_A9_7()
        {
            RunFile("S15.1.2.2_A9.7.js");
        }
    }
}
