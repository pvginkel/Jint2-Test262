//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;

namespace Jint.Test262.Ch15._15_1._15_1_2
{
    [TestFixture]
    public class _15_1_2_1Fixture : Test262Fixture
    {
        public _15_1_2_1Fixture()
            : base("ch15\\15.1\\15.1.2\\15.1.2.1")
        {
        }

        [Test(Description = "Checking all primitive")]
        public void S15_1_2_1_A1_1_T1()
        {
            RunFile("S15.1.2.1_A1.1_T1.js");
        }

        [Test(Description = "Checking all object")]
        public void S15_1_2_1_A1_1_T2()
        {
            RunFile("S15.1.2.1_A1.1_T2.js");
        }

        [Test(Description = "eval(\"x = 1\", \"x = 2\"), x equal 1, not 2")]
        public void S15_1_2_1_A1_2_T1()
        {
            RunFile("S15.1.2.1_A1.2_T1.js");
        }

        [Test(Description = "Checking if execution of \"eval(\"x = 1; x\\u000A++\"), catch SyntaxError\" passes")]
        public void S15_1_2_1_A2_T1()
        {
            RunFile("S15.1.2.1_A2_T1.js");
        }

        [Test(Description = "Checking if execution of \"eval(\"x = 1; x\\u000A++\")\" fails")]
        [ExpectedException]
        public void S15_1_2_1_A2_T2()
        {
            RunFile("S15.1.2.1_A2_T2.js");
        }

        [Test(Description = "Expression statement. Eval return primitive value")]
        public void S15_1_2_1_A3_1_T1()
        {
            RunFile("S15.1.2.1_A3.1_T1.js");
        }

        [Test(Description = "Expression statement. Eval return object value")]
        public void S15_1_2_1_A3_1_T2()
        {
            RunFile("S15.1.2.1_A3.1_T2.js");
        }

        [Test(Description = "Block statement")]
        public void S15_1_2_1_A3_2_T1()
        {
            RunFile("S15.1.2.1_A3.2_T1.js");
        }

        [Test(Description = "Var statement")]
        public void S15_1_2_1_A3_2_T2()
        {
            RunFile("S15.1.2.1_A3.2_T2.js");
        }

        [Test(Description = "Empty statement")]
        public void S15_1_2_1_A3_2_T3()
        {
            RunFile("S15.1.2.1_A3.2_T3.js");
        }

        [Test(Description = "If statement")]
        public void S15_1_2_1_A3_2_T4()
        {
            RunFile("S15.1.2.1_A3.2_T4.js");
        }

        [Test(Description = "Switch statement")]
        public void S15_1_2_1_A3_2_T5()
        {
            RunFile("S15.1.2.1_A3.2_T5.js");
        }

        [Test(Description = "do-while statement")]
        public void S15_1_2_1_A3_2_T6()
        {
            RunFile("S15.1.2.1_A3.2_T6.js");
        }

        [Test(Description = "do-while statement")]
        public void S15_1_2_1_A3_2_T7()
        {
            RunFile("S15.1.2.1_A3.2_T7.js");
        }

        [Test(Description = "for statement")]
        public void S15_1_2_1_A3_2_T8()
        {
            RunFile("S15.1.2.1_A3.2_T8.js");
        }

        [Test(Description = "Continue statement")]
        public void S15_1_2_1_A3_3_T1()
        {
            RunFile("S15.1.2.1_A3.3_T1.js");
        }

        [Test(Description = "Break statement")]
        public void S15_1_2_1_A3_3_T2()
        {
            RunFile("S15.1.2.1_A3.3_T2.js");
        }

        [Test(Description = "Return statement")]
        public void S15_1_2_1_A3_3_T3()
        {
            RunFile("S15.1.2.1_A3.3_T3.js");
        }

        [Test(Description = "Throw statement")]
        public void S15_1_2_1_A3_3_T4()
        {
            RunFile("S15.1.2.1_A3.3_T4.js");
        }

        [Test(Description = "Checking use propertyIsEnumerable, for-in")]
        public void S15_1_2_1_A4_1()
        {
            RunFile("S15.1.2.1_A4.1.js");
        }

        [Test(Description = "Checking use hasOwnProperty, delete")]
        public void S15_1_2_1_A4_2()
        {
            RunFile("S15.1.2.1_A4.2.js");
        }

        [Test(Description = "Checking if varying the length property fails")]
        public void S15_1_2_1_A4_3()
        {
            RunFile("S15.1.2.1_A4.3.js");
        }

        [Test(Description = "eval.length === 1")]
        public void S15_1_2_1_A4_4()
        {
            RunFile("S15.1.2.1_A4.4.js");
        }

        [Test(Description = "Checking use propertyIsEnumerable, for-in")]
        public void S15_1_2_1_A4_5()
        {
            RunFile("S15.1.2.1_A4.5.js");
        }

        [Test(Description = "Checking eval.prototype")]
        public void S15_1_2_1_A4_6()
        {
            RunFile("S15.1.2.1_A4.6.js");
        }

        [Test(Description = "If property does not implement the internal [[Construct]] method, throw a TypeError exception")]
        public void S15_1_2_1_A4_7()
        {
            RunFile("S15.1.2.1_A4.7.js");
        }
    }
}
